{"version":3,"sources":["jquery-sparkline.bundle.js"],"names":["document","Math","undefined","factory","$","getDefaults","createClass","SPFormat","clipval","quartile","normalizeValue","normalizeValues","remove","isNumber","all","addCSS","ensureArray","formatNumber","RangeMap","MouseHandler","Tooltip","barHighlightMixin","line","bar","tristate","discrete","bullet","pie","box","VShape","VCanvas_base","VCanvas_canvas","VCanvas_vml","pending","UNSET_OPTION","shapeCount","common","type","lineColor","fillColor","defaultPixelsPerValue","width","height","composite","tagValuesAttribute","tagOptionsPrefix","enableTagOptions","enableHighlight","highlightLighten","tooltipSkipNull","tooltipPrefix","tooltipSuffix","disableHiddenCheck","numberFormatter","numberDigitGroupCount","numberDigitGroupSep","numberDecimalMark","disableTooltips","disableInteraction","spotColor","highlightSpotColor","highlightLineColor","spotRadius","minSpotColor","maxSpotColor","lineWidth","normalRangeMin","normalRangeMax","normalRangeColor","drawNormalOnTop","chartRangeMin","chartRangeMax","chartRangeMinX","chartRangeMaxX","tooltipFormat","barColor","negBarColor","stackedBarColor","zeroColor","nullColor","zeroAxis","barWidth","barSpacing","chartRangeClip","colorMap","posBarColor","zeroBarColor","tooltipValueLookups","map","-1","0","1","lineHeight","thresholdColor","thresholdValue","targetColor","targetWidth","performanceColor","rangeColors","base","fields","r","p","t","offset","sliceColors","borderWidth","borderColor","raw","boxLineColor","boxFillColor","whiskerColor","outlierLineColor","outlierFillColor","medianColor","showOutliers","outlierIQR","target","tooltipFormatFieldlistKey","lq","med","uq","lo","ro","lw","rw","Class","args","this","init","apply","arguments","length","prototype","extend","_super","Array","slice","call","unshift","cls","SPFormatClass","fre","precre","format","fclass","render","fieldset","lookups","options","match","token","lookupkey","fieldvalue","prec","self","replace","exec","get","spformat","val","min","max","values","q","vl","floor","nf","parseFloat","vals","i","result","filter","push","num","isNaN","isFinite","groupsize","groupsep","decsep","toString","toFixed","split","inArray","splice","join","arr","ignoreNull","isArray","css","tag","iefail","createStyleSheet","cssText","e","createElement","getElementsByTagName","appendChild","styleSheets","body","style","WebkitAppearance","fn","simpledraw","useExisting","interact","mhandler","data","sparkline","canvas","el","getContext","namespaces","v","add","innerWidth","innerHeight","registerCanvas","cleardraw","reset","RangeMapClass","key","range","rangelist","hasOwnProperty","indexOf","Infinity","value","range_map","$el","currentPageX","currentPageY","splist","tooltip","over","displayTooltips","highlightEnabled","registerSparkline","sp","updateDisplay","$canvas","mouseenter","proxy","mouseleave","click","mouseclick","removeTooltip","clickEvent","Event","originalEvent","sparklines","trigger","unbind","bind","mousemove","pageX","pageY","currentEl","updatePosition","spcount","needsRefresh","clearRegionHighlight","tooltiphtml","changeEvent","localX","left","localY","top","setRegionHighlight","getCurrentRegionTooltip","setContent","disableHighlight","sizeStyle","tooltipClassname","sizetipStyle","container","tooltipOffsetX","tooltipOffsetY","sizetip","id","class","appendTo","offsetLeft","offsetTop","hidden","window","updateWindowDims","scrollTop","scrollLeft","scrollRight","getSize","content","html","visibility","x","y","mousex","mousey","userValues","userOptions","each","$this","tmp","getAttribute","innerHTML","alert","is","parents","defaults","sparkline_display_visible","pl","done","closest","extendedOptions","tagOptionType","tagValCache","getTagSetting","mergedOptions","pairs","keyval","prefix","substr","defaultval","tagOption","_base","disabled","currentRegion","initTarget","interactive","canvasWidth","pixelWidth","canvasHeight","pixelHeight","getRegion","newRegion","removeHighlight","renderHighlight","changeHighlight","highlight","formats","formatlen","text","showFields","showFieldsKey","newFields","fv","formatter","fieldlen","j","header","entries","getCurrentRegionFields","isNull","suffix","calcHighlightColor","color","parse","mult","rgbnew","highlightColor","lighten","round","parseInt","newShapes","shapeids","regionShapes","renderRegion","replaceWithShapes","newShape","replaceWithShape","shapes","ids","append","vertices","regionMap","xvalues","yvalues","yminmax","hightlightSpotId","lastShapeId","highlightSpot","highlightLine","vertex","drawCircle","highlightSpotId","insertAfterShape","drawLine","canvasTop","highlightLineId","removeShapeId","scanValues","isStr","valcount","Number","maxy","maxyorg","miny","minyorg","maxx","minx","processRangeOptions","drawNormalRange","canvasLeft","rangey","ytop","drawRect","rangex","yvallast","path","paths","xnext","xpos","last","next","yvalcount","lineShapes","fillShapes","plen","valueSpots","hlSpotsEnabled","ceil","pop","drawShape","getLastShapeId","isStackString","groupMin","groupMax","stackRanges","numValues","vlen","xaxisOffset","clipMin","clipMax","stacked","vlist","slen","svals","yoffset","stackMin","stackMax","totalBarWidth","stackTotals","stackRangesNeg","abs","canvasHeightEf","colorMapByIndex","colorMapByValue","calcColor","stacknum","valuenum","newColor","yoffsetNeg","minPlotted","allMin","halfHeight","interval","itemWidth","pheight","valueShapes","regiondata","shapeid","getShapeAt","fieldkey","region","shape","renderRange","renderPerformance","renderTarget","rn","rangeval","rangewidth","perfval","perfwidth","targetval","targettop","targetheight","p1","t0","total","radius","percent","newslice","renderSlice","start","end","circle","PI","drawPieSlice","donutWidth","field","quartiles","loutlier","routlier","lwhisker","rwhisker","iqr","q1","q2","q3","size","unitSize","minValue","maxValue","sort","a","b","appendShape","_pxregex","x1","y1","x2","y2","_genShape","startAngle","endAngle","getElement","_insert","_calculatePixelDims","shapetype","shapeargs","display","verticalAlign","shapeseq","currentTargetShapeId","_getContext","context","strokeStyle","fillStyle","clearRect","_drawShape","beginPath","moveTo","lineTo","stroke","fill","targetX","targetY","isPointInPath","_drawCircle","arc","_drawPieSlice","closePath","_drawRect","sid","first","shapemap","groupel","position","overflow","margin","padding","insertAdjacentHTML","group","children","rendered","prerender","initial","closed","vpath","startx","starty","endx","endy","cos","sin","vel","existing","outerHTML","removeChild","define","amd","jQuery"],"mappings":"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","file":"jquery-sparkline.bundle.js","sourcesContent":["/**\n*\n* jquery.sparkline.js\n*\n* v2.4.1\n* (c) Splunk, Inc\n* Contact: Gareth Watts (gareth@splunk.com)\n* http://omnipotent.net/jquery.sparkline/\n*\n* Generates inline sparkline charts from data supplied either to the method\n* or inline in HTML\n*\n* Compatible with Internet Explorer 6.0+ and modern browsers equipped with the canvas tag\n* (Firefox 2.0+, Safari, Opera, etc)\n*\n* License: New BSD License\n*\n* Copyright (c) 2012, Splunk Inc.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*\n*     * Redistributions of source code must retain the above copyright notice,\n*       this list of conditions and the following disclaimer.\n*     * Redistributions in binary form must reproduce the above copyright notice,\n*       this list of conditions and the following disclaimer in the documentation\n*       and/or other materials provided with the distribution.\n*     * Neither the name of Splunk Inc nor the names of its contributors may\n*       be used to endorse or promote products derived from this software without\n*       specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\n* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n* SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\n* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*\n*\n* Usage:\n*  $(selector).sparkline(values, options)\n*\n* If values is undefined or set to 'html' then the data values are read from the specified tag:\n*   <p>Sparkline: <span class=\"sparkline\">1,4,6,6,8,5,3,5</span></p>\n*   $('.sparkline').sparkline();\n* There must be no spaces in the enclosed data set\n*\n* Otherwise values must be an array of numbers or null values\n*    <p>Sparkline: <span id=\"sparkline1\">This text replaced if the browser is compatible</span></p>\n*    $('#sparkline1').sparkline([1,4,6,6,8,5,3,5])\n*    $('#sparkline2').sparkline([1,4,6,null,null,5,3,5])\n*\n* Values can also be specified in an HTML comment, or as a values attribute:\n*    <p>Sparkline: <span class=\"sparkline\"><!--1,4,6,6,8,5,3,5 --></span></p>\n*    <p>Sparkline: <span class=\"sparkline\" values=\"1,4,6,6,8,5,3,5\"></span></p>\n*    $('.sparkline').sparkline();\n*\n* For line charts, x values can also be specified:\n*   <p>Sparkline: <span class=\"sparkline\">1:1,2.7:4,3.4:6,5:6,6:8,8.7:5,9:3,10:5</span></p>\n*    $('#sparkline1').sparkline([ [1,1], [2.7,4], [3.4,6], [5,6], [6,8], [8.7,5], [9,3], [10,5] ])\n*\n* By default, options should be passed in as the second argument to the sparkline function:\n*   $('.sparkline').sparkline([1,2,3,4], {type: 'bar'})\n*\n* Options can also be set by passing them on the tag itself.  This feature is disabled by default though\n* as there's a slight performance overhead:\n*   $('.sparkline').sparkline([1,2,3,4], {enableTagOptions: true})\n*   <p>Sparkline: <span class=\"sparkline\" sparkType=\"bar\" sparkBarColor=\"red\">loading</span></p>\n* Prefix all options supplied as tag attribute with \"spark\" (configurable by setting tagOptionsPrefix)\n*\n* Supported options:\n*   lineColor - Color of the line used for the chart\n*   fillColor - Color used to fill in the chart - Set to '' or false for a transparent chart\n*   width - Width of the chart - Defaults to 3 times the number of values in pixels\n*   height - Height of the chart - Defaults to the height of the containing element\n*   chartRangeMin - Specify the minimum value to use for the Y range of the chart - Defaults to the minimum value supplied\n*   chartRangeMax - Specify the maximum value to use for the Y range of the chart - Defaults to the maximum value supplied\n*   chartRangeClip - Clip out of range values to the max/min specified by chartRangeMin and chartRangeMax\n*   chartRangeMinX - Specify the minimum value to use for the X range of the chart - Defaults to the minimum value supplied\n*   chartRangeMaxX - Specify the maximum value to use for the X range of the chart - Defaults to the maximum value supplied\n*   composite - If true then don't erase any existing chart attached to the tag, but draw\n*           another chart over the top - Note that width and height are ignored if an\n*           existing chart is detected.\n*   tagValuesAttribute - Name of tag attribute to check for data values - Defaults to 'values'\n*   enableTagOptions - Whether to check tags for sparkline options\n*   tagOptionsPrefix - Prefix used for options supplied as tag attributes - Defaults to 'spark'\n*   disableHiddenCheck - If set to true, then the plugin will assume that charts will never be drawn into a\n*           hidden dom element, avoding a browser reflow\n*   disableInteraction - If set to true then all mouseover/click interaction behaviour will be disabled,\n*       making the plugin perform much like it did in 1.x\n*   disableTooltips - If set to true then tooltips will be disabled - Defaults to false (tooltips enabled)\n*   disableHighlight - If set to true then highlighting of selected chart elements on mouseover will be disabled\n*       defaults to false (highlights enabled)\n*   highlightLighten - Factor to lighten/darken highlighted chart values by - Defaults to 1.4 for a 40% increase\n*   tooltipContainer - Specify which DOM element the tooltip should be rendered into - defaults to document.body\n*   tooltipClassname - Optional CSS classname to apply to tooltips - If not specified then a default style will be applied\n*   tooltipOffsetX - How many pixels away from the mouse pointer to render the tooltip on the X axis\n*   tooltipOffsetY - How many pixels away from the mouse pointer to render the tooltip on the r axis\n*   tooltipFormatter  - Optional callback that allows you to override the HTML displayed in the tooltip\n*       callback is given arguments of (sparkline, options, fields)\n*   tooltipChartTitle - If specified then the tooltip uses the string specified by this setting as a title\n*   tooltipFormat - A format string or SPFormat object  (or an array thereof for multiple entries)\n*       to control the format of the tooltip\n*   tooltipPrefix - A string to prepend to each field displayed in a tooltip\n*   tooltipSuffix - A string to append to each field displayed in a tooltip\n*   tooltipSkipNull - If true then null values will not have a tooltip displayed (defaults to true)\n*   tooltipValueLookups - An object or range map to map field values to tooltip strings\n*       (eg. to map -1 to \"Lost\", 0 to \"Draw\", and 1 to \"Win\")\n*   numberFormatter - Optional callback for formatting numbers in tooltips\n*   numberDigitGroupSep - Character to use for group separator in numbers \"1,234\" - Defaults to \",\"\n*   numberDecimalMark - Character to use for the decimal point when formatting numbers - Defaults to \".\"\n*   numberDigitGroupCount - Number of digits between group separator - Defaults to 3\n*\n* There are 7 types of sparkline, selected by supplying a \"type\" option of 'line' (default),\n* 'bar', 'tristate', 'bullet', 'discrete', 'pie' or 'box'\n*    line - Line chart.  Options:\n*       spotColor - Set to '' to not end each line in a circular spot\n*       minSpotColor - If set, color of spot at minimum value\n*       maxSpotColor - If set, color of spot at maximum value\n*       spotRadius - Radius in pixels\n*       lineWidth - Width of line in pixels\n*       normalRangeMin\n*       normalRangeMax - If set draws a filled horizontal bar between these two values marking the \"normal\"\n*                      or expected range of values\n*       normalRangeColor - Color to use for the above bar\n*       drawNormalOnTop - Draw the normal range above the chart fill color if true\n*       defaultPixelsPerValue - Defaults to 3 pixels of width for each value in the chart\n*       highlightSpotColor - The color to use for drawing a highlight spot on mouseover - Set to null to disable\n*       highlightLineColor - The color to use for drawing a highlight line on mouseover - Set to null to disable\n*       valueSpots - Specify which points to draw spots on, and in which color.  Accepts a range map\n*\n*   bar - Bar chart.  Options:\n*       barColor - Color of bars for postive values\n*       negBarColor - Color of bars for negative values\n*       zeroColor - Color of bars with zero values\n*       nullColor - Color of bars with null values - Defaults to omitting the bar entirely\n*       barWidth - Width of bars in pixels\n*       colorMap - Optional mappnig of values to colors to override the *BarColor values above\n*                  can be an Array of values to control the color of individual bars or a range map\n*                  to specify colors for individual ranges of values\n*       barSpacing - Gap between bars in pixels\n*       zeroAxis - Centers the y-axis around zero if true\n*\n*   tristate - Charts values of win (>0), lose (<0) or draw (=0)\n*       posBarColor - Color of win values\n*       negBarColor - Color of lose values\n*       zeroBarColor - Color of draw values\n*       barWidth - Width of bars in pixels\n*       barSpacing - Gap between bars in pixels\n*       colorMap - Optional mappnig of values to colors to override the *BarColor values above\n*                  can be an Array of values to control the color of individual bars or a range map\n*                  to specify colors for individual ranges of values\n*\n*   discrete - Options:\n*       lineHeight - Height of each line in pixels - Defaults to 30% of the graph height\n*       thesholdValue - Values less than this value will be drawn using thresholdColor instead of lineColor\n*       thresholdColor\n*\n*   bullet - Values for bullet graphs msut be in the order: target, performance, range1, range2, range3, ...\n*       options:\n*       targetColor - The color of the vertical target marker\n*       targetWidth - The width of the target marker in pixels\n*       performanceColor - The color of the performance measure horizontal bar\n*       rangeColors - Colors to use for each qualitative range background color\n*\n*   pie - Pie chart. Options:\n*       sliceColors - An array of colors to use for pie slices\n*       offset - Angle in degrees to offset the first slice - Try -90 or +90\n*       borderWidth - Width of border to draw around the pie chart, in pixels - Defaults to 0 (no border)\n*       borderColor - Color to use for the pie chart border - Defaults to #000\n*\n*   box - Box plot. Options:\n*       raw - Set to true to supply pre-computed plot points as values\n*             values should be: low_outlier, low_whisker, q1, median, q3, high_whisker, high_outlier\n*             When set to false you can supply any number of values and the box plot will\n*             be computed for you.  Default is false.\n*       showOutliers - Set to true (default) to display outliers as circles\n*       outlierIQR - Interquartile range used to determine outliers.  Default 1.5\n*       boxLineColor - Outline color of the box\n*       boxFillColor - Fill color for the box\n*       whiskerColor - Line color used for whiskers\n*       outlierLineColor - Outline color of outlier circles\n*       outlierFillColor - Fill color of the outlier circles\n*       spotRadius - Radius of outlier circles\n*       medianColor - Line color of the median line\n*       target - Draw a target cross hair at the supplied value (default undefined)\n*\n*\n*\n*   Examples:\n*   $('#sparkline1').sparkline(myvalues, { lineColor: '#f00', fillColor: false });\n*   $('.barsparks').sparkline('html', { type:'bar', height:'40px', barWidth:5 });\n*   $('#tristate').sparkline([1,1,-1,1,0,0,-1], { type:'tristate' }):\n*   $('#discrete').sparkline([1,3,4,5,5,3,4,5], { type:'discrete' });\n*   $('#bullet').sparkline([10,12,12,9,7], { type:'bullet' });\n*   $('#pie').sparkline([1,1,2], { type:'pie' });\n*/\n\n/*jslint regexp: true, browser: true, jquery: true, white: true, nomen: false, plusplus: false, maxerr: 500, indent: 4 */\n\n(function(document, Math, undefined) { // performance/minified-size optimization\n(function(factory) {\n    if(typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (jQuery && !jQuery.fn.sparkline) {\n        factory(jQuery);\n    }\n}\n(function($) {\n    'use strict';\n\n    var UNSET_OPTION = {},\n        getDefaults, createClass, SPFormat, clipval, quartile, normalizeValue, normalizeValues,\n        remove, isNumber, all, sum, addCSS, ensureArray, formatNumber, RangeMap,\n        MouseHandler, Tooltip, barHighlightMixin,\n        line, bar, tristate, discrete, bullet, pie, box, defaultStyles, initStyles,\n        VShape, VCanvas_base, VCanvas_canvas, VCanvas_vml, pending, shapeCount = 0;\n\n    /**\n     * Default configuration settings\n     */\n    getDefaults = function () {\n        return {\n            // Settings common to most/all chart types\n            common: {\n                type: 'line',\n                lineColor: '#00f',\n                fillColor: '#cdf',\n                defaultPixelsPerValue: 3,\n                width: 'auto',\n                height: 'auto',\n                composite: false,\n                tagValuesAttribute: 'values',\n                tagOptionsPrefix: 'spark',\n                enableTagOptions: false,\n                enableHighlight: true,\n                highlightLighten: 1.4,\n                tooltipSkipNull: true,\n                tooltipPrefix: '',\n                tooltipSuffix: '',\n                disableHiddenCheck: false,\n                numberFormatter: false,\n                numberDigitGroupCount: 3,\n                numberDigitGroupSep: ',',\n                numberDecimalMark: '.',\n                disableTooltips: false,\n                disableInteraction: false\n            },\n            // Defaults for line charts\n            line: {\n                spotColor: '#f80',\n                highlightSpotColor: '#5f5',\n                highlightLineColor: '#f22',\n                spotRadius: 1.5,\n                minSpotColor: '#f80',\n                maxSpotColor: '#f80',\n                lineWidth: 1,\n                normalRangeMin: undefined,\n                normalRangeMax: undefined,\n                normalRangeColor: '#ccc',\n                drawNormalOnTop: false,\n                chartRangeMin: undefined,\n                chartRangeMax: undefined,\n                chartRangeMinX: undefined,\n                chartRangeMaxX: undefined,\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{prefix}}{{y}}{{suffix}}')\n            },\n            // Defaults for bar charts\n            bar: {\n                barColor: '#3366cc',\n                negBarColor: '#f44',\n                stackedBarColor: ['#3366cc', '#dc3912', '#ff9900', '#109618', '#66aa00',\n                    '#dd4477', '#0099c6', '#990099'],\n                zeroColor: undefined,\n                nullColor: undefined,\n                zeroAxis: true,\n                barWidth: 4,\n                barSpacing: 1,\n                chartRangeMax: undefined,\n                chartRangeMin: undefined,\n                chartRangeClip: false,\n                colorMap: undefined,\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{prefix}}{{value}}{{suffix}}')\n            },\n            // Defaults for tristate charts\n            tristate: {\n                barWidth: 4,\n                barSpacing: 1,\n                posBarColor: '#6f6',\n                negBarColor: '#f44',\n                zeroBarColor: '#999',\n                colorMap: {},\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{value:map}}'),\n                tooltipValueLookups: { map: { '-1': 'Loss', '0': 'Draw', '1': 'Win' } }\n            },\n            // Defaults for discrete charts\n            discrete: {\n                lineHeight: 'auto',\n                thresholdColor: undefined,\n                thresholdValue: 0,\n                chartRangeMax: undefined,\n                chartRangeMin: undefined,\n                chartRangeClip: false,\n                tooltipFormat: new SPFormat('{{prefix}}{{value}}{{suffix}}')\n            },\n            // Defaults for bullet charts\n            bullet: {\n                targetColor: '#f33',\n                targetWidth: 3, // width of the target bar in pixels\n                performanceColor: '#33f',\n                rangeColors: ['#d3dafe', '#a8b6ff', '#7f94ff'],\n                base: undefined, // set this to a number to change the base start number\n                tooltipFormat: new SPFormat('{{fieldkey:fields}} - {{value}}'),\n                tooltipValueLookups: { fields: {r: 'Range', p: 'Performance', t: 'Target'} }\n            },\n            // Defaults for pie charts\n            pie: {\n                offset: 0,\n                sliceColors: ['#3366cc', '#dc3912', '#ff9900', '#109618', '#66aa00',\n                    '#dd4477', '#0099c6', '#990099'],\n                borderWidth: 0,\n                borderColor: '#000',\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{value}} ({{percent.1}}%)')\n            },\n            // Defaults for box plots\n            box: {\n                raw: false,\n                boxLineColor: '#000',\n                boxFillColor: '#cdf',\n                whiskerColor: '#000',\n                outlierLineColor: '#333',\n                outlierFillColor: '#fff',\n                medianColor: '#f00',\n                showOutliers: true,\n                outlierIQR: 1.5,\n                spotRadius: 1.5,\n                target: undefined,\n                targetColor: '#4a2',\n                chartRangeMax: undefined,\n                chartRangeMin: undefined,\n                tooltipFormat: new SPFormat('{{field:fields}}: {{value}}'),\n                tooltipFormatFieldlistKey: 'field',\n                tooltipValueLookups: { fields: { lq: 'Lower Quartile', med: 'Median',\n                    uq: 'Upper Quartile', lo: 'Left Outlier', ro: 'Right Outlier',\n                    lw: 'Left Whisker', rw: 'Right Whisker'} }\n            }\n        };\n    };\n\n    // You can have tooltips use a css class other than jqstooltip by specifying tooltipClassname\n    defaultStyles = '.jqstooltip { ' +\n            'position: absolute;' +\n            'left: 0px;' +\n            'top: 0px;' +\n            'visibility: hidden;' +\n            'background: rgb(0, 0, 0) transparent;' +\n            'background-color: rgba(0,0,0,0.6);' +\n            'filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);' +\n            '-ms-filter: \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)\";' +\n            'color: white;' +\n            'font: 10px arial, san serif;' +\n            'text-align: left;' +\n            'white-space: nowrap;' +\n            'padding: 5px;' +\n            'border: 1px solid white;' +\n            'box-sizing: content-box;' +\n            'z-index: 10000;' +\n            '}' +\n            '.jqsfield { ' +\n            'color: white;' +\n            'font: 10px arial, san serif;' +\n            'text-align: left;' +\n            '}';\n\n    /**\n     * Utilities\n     */\n\n    createClass = function (/* [baseclass, [mixin, ...]], definition */) {\n        var Class, args;\n        Class = function () {\n            this.init.apply(this, arguments);\n        };\n        if (arguments.length > 1) {\n            if (arguments[0]) {\n                Class.prototype = $.extend(new arguments[0](), arguments[arguments.length - 1]);\n                Class._super = arguments[0].prototype;\n            } else {\n                Class.prototype = arguments[arguments.length - 1];\n            }\n            if (arguments.length > 2) {\n                args = Array.prototype.slice.call(arguments, 1, -1);\n                args.unshift(Class.prototype);\n                $.extend.apply($, args);\n            }\n        } else {\n            Class.prototype = arguments[0];\n        }\n        Class.prototype.cls = Class;\n        return Class;\n    };\n\n    /**\n     * Wraps a format string for tooltips\n     * {{x}}\n     * {{x.2}\n     * {{x:months}}\n     */\n    $.SPFormatClass = SPFormat = createClass({\n        fre: /\\{\\{([\\w.]+?)(:(.+?))?\\}\\}/g,\n        precre: /(\\w+)\\.(\\d+)/,\n\n        init: function (format, fclass) {\n            this.format = format;\n            this.fclass = fclass;\n        },\n\n        render: function (fieldset, lookups, options) {\n            var self = this,\n                fields = fieldset,\n                match, token, lookupkey, fieldvalue, prec;\n            return this.format.replace(this.fre, function () {\n                var lookup;\n                token = arguments[1];\n                lookupkey = arguments[3];\n                match = self.precre.exec(token);\n                if (match) {\n                    prec = match[2];\n                    token = match[1];\n                } else {\n                    prec = false;\n                }\n                fieldvalue = fields[token];\n                if (fieldvalue === undefined) {\n                    return '';\n                }\n                if (lookupkey && lookups && lookups[lookupkey]) {\n                    lookup = lookups[lookupkey];\n                    if (lookup.get) { // RangeMap\n                        return lookups[lookupkey].get(fieldvalue) || fieldvalue;\n                    } else {\n                        return lookups[lookupkey][fieldvalue] || fieldvalue;\n                    }\n                }\n                if (isNumber(fieldvalue)) {\n                    if (options.get('numberFormatter')) {\n                        fieldvalue = options.get('numberFormatter')(fieldvalue);\n                    } else {\n                        fieldvalue = formatNumber(fieldvalue, prec,\n                            options.get('numberDigitGroupCount'),\n                            options.get('numberDigitGroupSep'),\n                            options.get('numberDecimalMark'));\n                    }\n                }\n                return fieldvalue;\n            });\n        }\n    });\n\n    // convience method to avoid needing the new operator\n    $.spformat = function(format, fclass) {\n        return new SPFormat(format, fclass);\n    };\n\n    clipval = function (val, min, max) {\n        if (val < min) {\n            return min;\n        }\n        if (val > max) {\n            return max;\n        }\n        return val;\n    };\n\n    quartile = function (values, q) {\n        var vl;\n        if (q === 2) {\n            vl = Math.floor(values.length / 2);\n            return values.length % 2 ? values[vl] : (values[vl-1] + values[vl]) / 2;\n        } else {\n            if (values.length % 2 ) { // odd\n                vl = (values.length * q + q) / 4;\n                return vl % 1 ? (values[Math.floor(vl)] + values[Math.floor(vl) - 1]) / 2 : values[vl-1];\n            } else { //even\n                vl = (values.length * q + 2) / 4;\n                return vl % 1 ? (values[Math.floor(vl)] + values[Math.floor(vl) - 1]) / 2 :  values[vl-1];\n\n            }\n        }\n    };\n\n    normalizeValue = function (val) {\n        var nf;\n        switch (val) {\n            case 'undefined':\n                val = undefined;\n                break;\n            case 'null':\n                val = null;\n                break;\n            case 'true':\n                val = true;\n                break;\n            case 'false':\n                val = false;\n                break;\n            default:\n                nf = parseFloat(val);\n                if (val == nf) {\n                    val = nf;\n                }\n        }\n        return val;\n    };\n\n    normalizeValues = function (vals) {\n        var i, result = [];\n        for (i = vals.length; i--;) {\n            result[i] = normalizeValue(vals[i]);\n        }\n        return result;\n    };\n\n    remove = function (vals, filter) {\n        var i, vl, result = [];\n        for (i = 0, vl = vals.length; i < vl; i++) {\n            if (vals[i] !== filter) {\n                result.push(vals[i]);\n            }\n        }\n        return result;\n    };\n\n    isNumber = function (num) {\n        return !isNaN(parseFloat(num)) && isFinite(num);\n    };\n\n    formatNumber = function (num, prec, groupsize, groupsep, decsep) {\n        var p, i;\n        num = (prec === false ? parseFloat(num).toString() : num.toFixed(prec)).split('');\n        p = (p = $.inArray('.', num)) < 0 ? num.length : p;\n        if (p < num.length) {\n            num[p] = decsep;\n        }\n        for (i = p - groupsize; i > 0; i -= groupsize) {\n            num.splice(i, 0, groupsep);\n        }\n        return num.join('');\n    };\n\n    // determine if all values of an array match a value\n    // returns true if the array is empty\n    all = function (val, arr, ignoreNull) {\n        var i;\n        for (i = arr.length; i--; ) {\n            if (ignoreNull && arr[i] === null) continue;\n            if (arr[i] !== val) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // sums the numeric values in an array, ignoring other values\n    sum = function (vals) {\n        var total = 0, i;\n        for (i = vals.length; i--;) {\n            total += typeof vals[i] === 'number' ? vals[i] : 0;\n        }\n        return total;\n    };\n\n    ensureArray = function (val) {\n        return $.isArray(val) ? val : [val];\n    };\n\n    // http://paulirish.com/2008/bookmarklet-inject-new-css-rules/\n    addCSS = function(css) {\n        var tag, iefail;\n        if (document.createStyleSheet) {\n            try {\n                document.createStyleSheet().cssText = css;\n                return;\n            } catch (e) {\n                // IE <= 9 maxes out at 31 stylesheets; inject into page instead.\n                iefail = true;\n            }\n        }\n        tag = document.createElement('style');\n        tag.type = 'text/css';\n        document.getElementsByTagName('head')[0].appendChild(tag);\n        if (iefail) {\n            document.styleSheets[document.styleSheets.length - 1].cssText = css;\n        } else {\n            tag[(typeof document.body.style.WebkitAppearance == 'string') /* webkit only */ ? 'innerText' : 'innerHTML'] = css;\n        }\n    };\n\n    // Provide a cross-browser interface to a few simple drawing primitives\n    $.fn.simpledraw = function (width, height, useExisting, interact) {\n        var target, mhandler;\n        if (useExisting && (target = this.data('_jqs_vcanvas'))) {\n            return target;\n        }\n\n        if ($.fn.sparkline.canvas === false) {\n            // We've already determined that neither Canvas nor VML are available\n            return false;\n\n        } else if ($.fn.sparkline.canvas === undefined) {\n            // No function defined yet -- need to see if we support Canvas or VML\n            var el = document.createElement('canvas');\n            if (!!(el.getContext && el.getContext('2d'))) {\n                // Canvas is available\n                $.fn.sparkline.canvas = function(width, height, target, interact) {\n                    return new VCanvas_canvas(width, height, target, interact);\n                };\n            } else if (document.namespaces && !document.namespaces.v) {\n                // VML is available\n                document.namespaces.add('v', 'urn:schemas-microsoft-com:vml', '#default#VML');\n                $.fn.sparkline.canvas = function(width, height, target, interact) {\n                    return new VCanvas_vml(width, height, target);\n                };\n            } else {\n                // Neither Canvas nor VML are available\n                $.fn.sparkline.canvas = false;\n                return false;\n            }\n        }\n\n        if (width === undefined) {\n            width = $(this).innerWidth();\n        }\n        if (height === undefined) {\n            height = $(this).innerHeight();\n        }\n\n        target = $.fn.sparkline.canvas(width, height, this, interact);\n\n        mhandler = $(this).data('_jqs_mhandler');\n        if (mhandler) {\n            mhandler.registerCanvas(target);\n        }\n        return target;\n    };\n\n    $.fn.cleardraw = function () {\n        var target = this.data('_jqs_vcanvas');\n        if (target) {\n            target.reset();\n        }\n    };\n\n    $.RangeMapClass = RangeMap = createClass({\n        init: function (map) {\n            var key, range, rangelist = [];\n            for (key in map) {\n                if (map.hasOwnProperty(key) && typeof key === 'string' && key.indexOf(':') > -1) {\n                    range = key.split(':');\n                    range[0] = range[0].length === 0 ? -Infinity : parseFloat(range[0]);\n                    range[1] = range[1].length === 0 ? Infinity : parseFloat(range[1]);\n                    range[2] = map[key];\n                    rangelist.push(range);\n                }\n            }\n            this.map = map;\n            this.rangelist = rangelist || false;\n        },\n\n        get: function (value) {\n            var rangelist = this.rangelist,\n                i, range, result;\n            if ((result = this.map[value]) !== undefined) {\n                return result;\n            }\n            if (rangelist) {\n                for (i = rangelist.length; i--;) {\n                    range = rangelist[i];\n                    if (range[0] <= value && range[1] >= value) {\n                        return range[2];\n                    }\n                }\n            }\n            return undefined;\n        }\n    });\n\n    // Convenience function\n    $.range_map = function(map) {\n        return new RangeMap(map);\n    };\n\n    MouseHandler = createClass({\n        init: function (el, options) {\n            var $el = $(el);\n            this.$el = $el;\n            this.options = options;\n            this.currentPageX = 0;\n            this.currentPageY = 0;\n            this.el = el;\n            this.splist = [];\n            this.tooltip = null;\n            this.over = false;\n            this.displayTooltips = !options.get('disableTooltips');\n            this.highlightEnabled = !options.get('disableHighlight');\n        },\n\n        registerSparkline: function (sp) {\n            this.splist.push(sp);\n            if (this.over) {\n                this.updateDisplay();\n            }\n        },\n\n        registerCanvas: function (canvas) {\n            var $canvas = $(canvas.canvas);\n            this.canvas = canvas;\n            this.$canvas = $canvas;\n            $canvas.mouseenter($.proxy(this.mouseenter, this));\n            $canvas.mouseleave($.proxy(this.mouseleave, this));\n            $canvas.click($.proxy(this.mouseclick, this));\n        },\n\n        reset: function (removeTooltip) {\n            this.splist = [];\n            if (this.tooltip && removeTooltip) {\n                this.tooltip.remove();\n                this.tooltip = undefined;\n            }\n        },\n\n        mouseclick: function (e) {\n            var clickEvent = $.Event('sparklineClick');\n            clickEvent.originalEvent = e;\n            clickEvent.sparklines = this.splist;\n            this.$el.trigger(clickEvent);\n        },\n\n        mouseenter: function (e) {\n            $(document.body).unbind('mousemove.jqs');\n            $(document.body).bind('mousemove.jqs', $.proxy(this.mousemove, this));\n            this.over = true;\n            this.currentPageX = e.pageX;\n            this.currentPageY = e.pageY;\n            this.currentEl = e.target;\n            if (!this.tooltip && this.displayTooltips) {\n                this.tooltip = new Tooltip(this.options);\n                this.tooltip.updatePosition(e.pageX, e.pageY);\n            }\n            this.updateDisplay();\n        },\n\n        mouseleave: function () {\n            $(document.body).unbind('mousemove.jqs');\n            var splist = this.splist,\n                 spcount = splist.length,\n                 needsRefresh = false,\n                 sp, i;\n            this.over = false;\n            this.currentEl = null;\n\n            if (this.tooltip) {\n                this.tooltip.remove();\n                this.tooltip = null;\n            }\n\n            for (i = 0; i < spcount; i++) {\n                sp = splist[i];\n                if (sp.clearRegionHighlight()) {\n                    needsRefresh = true;\n                }\n            }\n\n            if (needsRefresh) {\n                this.canvas.render();\n            }\n        },\n\n        mousemove: function (e) {\n            this.currentPageX = e.pageX;\n            this.currentPageY = e.pageY;\n            this.currentEl = e.target;\n            if (this.tooltip) {\n                this.tooltip.updatePosition(e.pageX, e.pageY);\n            }\n            this.updateDisplay();\n        },\n\n        updateDisplay: function () {\n            var splist = this.splist,\n                 spcount = splist.length,\n                 needsRefresh = false,\n                 offset = this.$canvas.offset(),\n                 localX = this.currentPageX - offset.left,\n                 localY = this.currentPageY - offset.top,\n                 tooltiphtml, sp, i, result, changeEvent;\n            if (!this.over) {\n                return;\n            }\n            for (i = 0; i < spcount; i++) {\n                sp = splist[i];\n                result = sp.setRegionHighlight(this.currentEl, localX, localY);\n                if (result) {\n                    needsRefresh = true;\n                }\n            }\n            if (needsRefresh) {\n                changeEvent = $.Event('sparklineRegionChange');\n                changeEvent.sparklines = this.splist;\n                this.$el.trigger(changeEvent);\n                if (this.tooltip) {\n                    tooltiphtml = '';\n                    for (i = 0; i < spcount; i++) {\n                        sp = splist[i];\n                        tooltiphtml += sp.getCurrentRegionTooltip();\n                    }\n                    this.tooltip.setContent(tooltiphtml);\n                }\n                if (!this.disableHighlight) {\n                    this.canvas.render();\n                }\n            }\n            if (result === null) {\n                this.mouseleave();\n            }\n        }\n    });\n\n\n    Tooltip = createClass({\n        sizeStyle: 'position: static !important;' +\n            'display: block !important;' +\n            'visibility: hidden !important;' +\n            'float: left !important;',\n\n        init: function (options) {\n            var tooltipClassname = options.get('tooltipClassname', 'jqstooltip'),\n                sizetipStyle = this.sizeStyle,\n                offset;\n            this.container = options.get('tooltipContainer') || document.body;\n            this.tooltipOffsetX = options.get('tooltipOffsetX', 10);\n            this.tooltipOffsetY = options.get('tooltipOffsetY', 12);\n            // remove any previous lingering tooltip\n            $('#jqssizetip').remove();\n            $('#jqstooltip').remove();\n            this.sizetip = $('<div/>', {\n                id: 'jqssizetip',\n                style: sizetipStyle,\n                'class': tooltipClassname\n            });\n            this.tooltip = $('<div/>', {\n                id: 'jqstooltip',\n                'class': tooltipClassname\n            }).appendTo(this.container);\n            // account for the container's location\n            offset = this.tooltip.offset();\n            this.offsetLeft = offset.left;\n            this.offsetTop = offset.top;\n            this.hidden = true;\n            $(window).unbind('resize.jqs scroll.jqs');\n            $(window).bind('resize.jqs scroll.jqs', $.proxy(this.updateWindowDims, this));\n            this.updateWindowDims();\n        },\n\n        updateWindowDims: function () {\n            this.scrollTop = $(window).scrollTop();\n            this.scrollLeft = $(window).scrollLeft();\n            this.scrollRight = this.scrollLeft + $(window).width();\n            this.updatePosition();\n        },\n\n        getSize: function (content) {\n            this.sizetip.html(content).appendTo(this.container);\n            this.width = this.sizetip.width() + 1;\n            this.height = this.sizetip.height();\n            this.sizetip.remove();\n        },\n\n        setContent: function (content) {\n            if (!content) {\n                this.tooltip.css('visibility', 'hidden');\n                this.hidden = true;\n                return;\n            }\n            this.getSize(content);\n            this.tooltip.html(content)\n                .css({\n                    'width': this.width,\n                    'height': this.height,\n                    'visibility': 'visible'\n                });\n            if (this.hidden) {\n                this.hidden = false;\n                this.updatePosition();\n            }\n        },\n\n        updatePosition: function (x, y) {\n            if (x === undefined) {\n                if (this.mousex === undefined) {\n                    return;\n                }\n                x = this.mousex - this.offsetLeft;\n                y = this.mousey - this.offsetTop;\n\n            } else {\n                this.mousex = x = x - this.offsetLeft;\n                this.mousey = y = y - this.offsetTop;\n            }\n            if (!this.height || !this.width || this.hidden) {\n                return;\n            }\n\n            y -= this.height + this.tooltipOffsetY;\n            x += this.tooltipOffsetX;\n\n            if (y < this.scrollTop) {\n                y = this.scrollTop;\n            }\n            if (x < this.scrollLeft) {\n                x = this.scrollLeft;\n            } else if (x + this.width > this.scrollRight) {\n                x = this.scrollRight - this.width;\n            }\n\n            this.tooltip.css({\n                'left': x,\n                'top': y\n            });\n        },\n\n        remove: function () {\n            this.tooltip.remove();\n            this.sizetip.remove();\n            this.sizetip = this.tooltip = undefined;\n            $(window).unbind('resize.jqs scroll.jqs');\n        }\n    });\n\n    initStyles = function() {\n        addCSS(defaultStyles);\n    };\n\n    $(initStyles);\n\n    pending = [];\n    $.fn.sparkline = function (userValues, userOptions) {\n        return this.each(function () {\n            var options = new $.fn.sparkline.options(this, userOptions),\n                 $this = $(this),\n                 render, i;\n            render = function () {\n                var values, width, height, tmp, mhandler, sp, vals;\n                if (userValues === 'html' || userValues === undefined) {\n                    vals = this.getAttribute(options.get('tagValuesAttribute'));\n                    if (vals === undefined || vals === null) {\n                        vals = $this.html();\n                    }\n                    values = vals.replace(/(^\\s*<!--)|(-->\\s*$)|\\s+/g, '').split(',');\n                } else {\n                    values = userValues;\n                }\n\n                width = options.get('width') === 'auto' ? values.length * options.get('defaultPixelsPerValue') : options.get('width');\n                if (options.get('height') === 'auto') {\n                    if (!options.get('composite') || !$.data(this, '_jqs_vcanvas')) {\n                        // must be a better way to get the line height\n                        tmp = document.createElement('span');\n                        tmp.innerHTML = 'a';\n                        $this.html(tmp);\n                        height = $(tmp).innerHeight() || $(tmp).height();\n                        $(tmp).remove();\n                        tmp = null;\n                    }\n                } else {\n                    height = options.get('height');\n                }\n\n                if (!options.get('disableInteraction')) {\n                    mhandler = $.data(this, '_jqs_mhandler');\n                    if (!mhandler) {\n                        mhandler = new MouseHandler(this, options);\n                        $.data(this, '_jqs_mhandler', mhandler);\n                    } else if (!options.get('composite')) {\n                        mhandler.reset();\n                    }\n                } else {\n                    mhandler = false;\n                }\n\n                if (options.get('composite') && !$.data(this, '_jqs_vcanvas')) {\n                    if (!$.data(this, '_jqs_errnotify')) {\n                        alert('Attempted to attach a composite sparkline to an element with no existing sparkline');\n                        $.data(this, '_jqs_errnotify', true);\n                    }\n                    return;\n                }\n\n                sp = new $.fn.sparkline[options.get('type')](this, values, options, width, height);\n\n                sp.render();\n\n                if (mhandler) {\n                    mhandler.registerSparkline(sp);\n                }\n            };\n            if (($(this).html() && !options.get('disableHiddenCheck') && $(this).is(':hidden')) || !$(this).parents('body').length) {\n                if (!options.get('composite') && $.data(this, '_jqs_pending')) {\n                    // remove any existing references to the element\n                    for (i = pending.length; i; i--) {\n                        if (pending[i - 1][0] == this) {\n                            pending.splice(i - 1, 1);\n                        }\n                    }\n                }\n                pending.push([this, render]);\n                $.data(this, '_jqs_pending', true);\n            } else {\n                render.call(this);\n            }\n        });\n    };\n\n    $.fn.sparkline.defaults = getDefaults();\n\n\n    $.sparkline_display_visible = function () {\n        var el, i, pl;\n        var done = [];\n        for (i = 0, pl = pending.length; i < pl; i++) {\n            el = pending[i][0];\n            if ($(el).is(':visible') && !$(el).parents().is(':hidden')) {\n                pending[i][1].call(el);\n                $.data(pending[i][0], '_jqs_pending', false);\n                done.push(i);\n            } else if (!$(el).closest('html').length && !$.data(el, '_jqs_pending')) {\n                // element has been inserted and removed from the DOM\n                // If it was not yet inserted into the dom then the .data request\n                // will return true.\n                // removing from the dom causes the data to be removed.\n                $.data(pending[i][0], '_jqs_pending', false);\n                done.push(i);\n            }\n        }\n        for (i = done.length; i; i--) {\n            pending.splice(done[i - 1], 1);\n        }\n    };\n\n\n    /**\n     * User option handler\n     */\n    $.fn.sparkline.options = createClass({\n        init: function (tag, userOptions) {\n            var extendedOptions, defaults, base, tagOptionType;\n            this.userOptions = userOptions = userOptions || {};\n            this.tag = tag;\n            this.tagValCache = {};\n            defaults = $.fn.sparkline.defaults;\n            base = defaults.common;\n            this.tagOptionsPrefix = userOptions.enableTagOptions && (userOptions.tagOptionsPrefix || base.tagOptionsPrefix);\n\n            tagOptionType = this.getTagSetting('type');\n            if (tagOptionType === UNSET_OPTION) {\n                extendedOptions = defaults[userOptions.type || base.type];\n            } else {\n                extendedOptions = defaults[tagOptionType];\n            }\n            this.mergedOptions = $.extend({}, base, extendedOptions, userOptions);\n        },\n\n\n        getTagSetting: function (key) {\n            var prefix = this.tagOptionsPrefix,\n                val, i, pairs, keyval;\n            if (prefix === false || prefix === undefined) {\n                return UNSET_OPTION;\n            }\n            if (this.tagValCache.hasOwnProperty(key)) {\n                val = this.tagValCache.key;\n            } else {\n                val = this.tag.getAttribute(prefix + key);\n                if (val === undefined || val === null) {\n                    val = UNSET_OPTION;\n                } else if (val.substr(0, 1) === '[') {\n                    val = val.substr(1, val.length - 2).split(',');\n                    for (i = val.length; i--;) {\n                        val[i] = normalizeValue(val[i].replace(/(^\\s*)|(\\s*$)/g, ''));\n                    }\n                } else if (val.substr(0, 1) === '{') {\n                    pairs = val.substr(1, val.length - 2).split(',');\n                    val = {};\n                    for (i = pairs.length; i--;) {\n                        keyval = pairs[i].split(':', 2);\n                        val[keyval[0].replace(/(^\\s*)|(\\s*$)/g, '')] = normalizeValue(keyval[1].replace(/(^\\s*)|(\\s*$)/g, ''));\n                    }\n                } else {\n                    val = normalizeValue(val);\n                }\n                this.tagValCache.key = val;\n            }\n            return val;\n        },\n\n        get: function (key, defaultval) {\n            var tagOption = this.getTagSetting(key),\n                result;\n            if (tagOption !== UNSET_OPTION) {\n                return tagOption;\n            }\n            return (result = this.mergedOptions[key]) === undefined ? defaultval : result;\n        }\n    });\n\n\n    $.fn.sparkline._base = createClass({\n        disabled: false,\n\n        init: function (el, values, options, width, height) {\n            this.el = el;\n            this.$el = $(el);\n            this.values = values;\n            this.options = options;\n            this.width = width;\n            this.height = height;\n            this.currentRegion = undefined;\n        },\n\n        /**\n         * Setup the canvas\n         */\n        initTarget: function () {\n            var interactive = !this.options.get('disableInteraction');\n            if (!(this.target = this.$el.simpledraw(this.width, this.height, this.options.get('composite'), interactive))) {\n                this.disabled = true;\n            } else {\n                this.canvasWidth = this.target.pixelWidth;\n                this.canvasHeight = this.target.pixelHeight;\n            }\n        },\n\n        /**\n         * Actually render the chart to the canvas\n         */\n        render: function () {\n            if (this.disabled) {\n                this.el.innerHTML = '';\n                return false;\n            }\n            return true;\n        },\n\n        /**\n         * Return a region id for a given x/y co-ordinate\n         */\n        getRegion: function (x, y) {\n        },\n\n        /**\n         * Highlight an item based on the moused-over x,y co-ordinate\n         */\n        setRegionHighlight: function (el, x, y) {\n            var currentRegion = this.currentRegion,\n                highlightEnabled = !this.options.get('disableHighlight'),\n                newRegion;\n            if (x > this.canvasWidth || y > this.canvasHeight || x < 0 || y < 0) {\n                return null;\n            }\n            newRegion = this.getRegion(el, x, y);\n            if (currentRegion !== newRegion) {\n                if (currentRegion !== undefined && highlightEnabled) {\n                    this.removeHighlight();\n                }\n                this.currentRegion = newRegion;\n                if (newRegion !== undefined && highlightEnabled) {\n                    this.renderHighlight();\n                }\n                return true;\n            }\n            return false;\n        },\n\n        /**\n         * Reset any currently highlighted item\n         */\n        clearRegionHighlight: function () {\n            if (this.currentRegion !== undefined) {\n                this.removeHighlight();\n                this.currentRegion = undefined;\n                return true;\n            }\n            return false;\n        },\n\n        renderHighlight: function () {\n            this.changeHighlight(true);\n        },\n\n        removeHighlight: function () {\n            this.changeHighlight(false);\n        },\n\n        changeHighlight: function (highlight)  {},\n\n        /**\n         * Fetch the HTML to display as a tooltip\n         */\n        getCurrentRegionTooltip: function () {\n            var options = this.options,\n                header = '',\n                entries = [],\n                fields, formats, formatlen, fclass, text, i,\n                showFields, showFieldsKey, newFields, fv,\n                formatter, format, fieldlen, j;\n            if (this.currentRegion === undefined) {\n                return '';\n            }\n            fields = this.getCurrentRegionFields();\n            formatter = options.get('tooltipFormatter');\n            if (formatter) {\n                return formatter(this, options, fields);\n            }\n            if (options.get('tooltipChartTitle')) {\n                header += '<div class=\"jqs jqstitle\">' + options.get('tooltipChartTitle') + '</div>\\n';\n            }\n            formats = this.options.get('tooltipFormat');\n            if (!formats) {\n                return '';\n            }\n            if (!$.isArray(formats)) {\n                formats = [formats];\n            }\n            if (!$.isArray(fields)) {\n                fields = [fields];\n            }\n            showFields = this.options.get('tooltipFormatFieldlist');\n            showFieldsKey = this.options.get('tooltipFormatFieldlistKey');\n            if (showFields && showFieldsKey) {\n                // user-selected ordering of fields\n                newFields = [];\n                for (i = fields.length; i--;) {\n                    fv = fields[i][showFieldsKey];\n                    if ((j = $.inArray(fv, showFields)) != -1) {\n                        newFields[j] = fields[i];\n                    }\n                }\n                fields = newFields;\n            }\n            formatlen = formats.length;\n            fieldlen = fields.length;\n            for (i = 0; i < formatlen; i++) {\n                format = formats[i];\n                if (typeof format === 'string') {\n                    format = new SPFormat(format);\n                }\n                fclass = format.fclass || 'jqsfield';\n                for (j = 0; j < fieldlen; j++) {\n                    if (!fields[j].isNull || !options.get('tooltipSkipNull')) {\n                        $.extend(fields[j], {\n                            prefix: options.get('tooltipPrefix'),\n                            suffix: options.get('tooltipSuffix')\n                        });\n                        text = format.render(fields[j], options.get('tooltipValueLookups'), options);\n                        entries.push('<div class=\"' + fclass + '\">' + text + '</div>');\n                    }\n                }\n            }\n            if (entries.length) {\n                return header + entries.join('\\n');\n            }\n            return '';\n        },\n\n        getCurrentRegionFields: function () {},\n\n        calcHighlightColor: function (color, options) {\n            var highlightColor = options.get('highlightColor'),\n                lighten = options.get('highlightLighten'),\n                parse, mult, rgbnew, i;\n            if (highlightColor) {\n                return highlightColor;\n            }\n            if (lighten) {\n                // extract RGB values\n                parse = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(color) || /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(color);\n                if (parse) {\n                    rgbnew = [];\n                    mult = color.length === 4 ? 16 : 1;\n                    for (i = 0; i < 3; i++) {\n                        rgbnew[i] = clipval(Math.round(parseInt(parse[i + 1], 16) * mult * lighten), 0, 255);\n                    }\n                    return 'rgb(' + rgbnew.join(',') + ')';\n                }\n\n            }\n            return color;\n        }\n\n    });\n\n    barHighlightMixin = {\n        changeHighlight: function (highlight) {\n            var currentRegion = this.currentRegion,\n                target = this.target,\n                shapeids = this.regionShapes[currentRegion],\n                newShapes;\n            // will be null if the region value was null\n            if (shapeids) {\n                newShapes = this.renderRegion(currentRegion, highlight);\n                if ($.isArray(newShapes) || $.isArray(shapeids)) {\n                    target.replaceWithShapes(shapeids, newShapes);\n                    this.regionShapes[currentRegion] = $.map(newShapes, function (newShape) {\n                        return newShape.id;\n                    });\n                } else {\n                    target.replaceWithShape(shapeids, newShapes);\n                    this.regionShapes[currentRegion] = newShapes.id;\n                }\n            }\n        },\n\n        render: function () {\n            var values = this.values,\n                target = this.target,\n                regionShapes = this.regionShapes,\n                shapes, ids, i, j;\n\n            if (!this.cls._super.render.call(this)) {\n                return;\n            }\n            for (i = values.length; i--;) {\n                shapes = this.renderRegion(i);\n                if (shapes) {\n                    if ($.isArray(shapes)) {\n                        ids = [];\n                        for (j = shapes.length; j--;) {\n                            shapes[j].append();\n                            ids.push(shapes[j].id);\n                        }\n                        regionShapes[i] = ids;\n                    } else {\n                        shapes.append();\n                        regionShapes[i] = shapes.id; // store just the shapeid\n                    }\n                } else {\n                    // null value\n                    regionShapes[i] = null;\n                }\n            }\n            target.render();\n        }\n    };\n\n    /**\n     * Line charts\n     */\n    $.fn.sparkline.line = line = createClass($.fn.sparkline._base, {\n        type: 'line',\n\n        init: function (el, values, options, width, height) {\n            line._super.init.call(this, el, values, options, width, height);\n            this.vertices = [];\n            this.regionMap = [];\n            this.xvalues = [];\n            this.yvalues = [];\n            this.yminmax = [];\n            this.hightlightSpotId = null;\n            this.lastShapeId = null;\n            this.initTarget();\n        },\n\n        getRegion: function (el, x, y) {\n            var i,\n                regionMap = this.regionMap; // maps regions to value positions\n            for (i = regionMap.length; i--;) {\n                if (regionMap[i] !== null && x >= regionMap[i][0] && x <= regionMap[i][1]) {\n                    return regionMap[i][2];\n                }\n            }\n            return undefined;\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                isNull: this.yvalues[currentRegion] === null,\n                x: this.xvalues[currentRegion],\n                y: this.yvalues[currentRegion],\n                color: this.options.get('lineColor'),\n                fillColor: this.options.get('fillColor'),\n                offset: currentRegion\n            };\n        },\n\n        renderHighlight: function () {\n            var currentRegion = this.currentRegion,\n                target = this.target,\n                vertex = this.vertices[currentRegion],\n                options = this.options,\n                spotRadius = options.get('spotRadius'),\n                highlightSpotColor = options.get('highlightSpotColor'),\n                highlightLineColor = options.get('highlightLineColor'),\n                highlightSpot, highlightLine;\n\n            if (!vertex) {\n                return;\n            }\n            if (spotRadius && highlightSpotColor) {\n                highlightSpot = target.drawCircle(vertex[0], vertex[1],\n                    spotRadius, undefined, highlightSpotColor);\n                this.highlightSpotId = highlightSpot.id;\n                target.insertAfterShape(this.lastShapeId, highlightSpot);\n            }\n            if (highlightLineColor) {\n                highlightLine = target.drawLine(vertex[0], this.canvasTop, vertex[0],\n                    this.canvasTop + this.canvasHeight, highlightLineColor);\n                this.highlightLineId = highlightLine.id;\n                target.insertAfterShape(this.lastShapeId, highlightLine);\n            }\n        },\n\n        removeHighlight: function () {\n            var target = this.target;\n            if (this.highlightSpotId) {\n                target.removeShapeId(this.highlightSpotId);\n                this.highlightSpotId = null;\n            }\n            if (this.highlightLineId) {\n                target.removeShapeId(this.highlightLineId);\n                this.highlightLineId = null;\n            }\n        },\n\n        scanValues: function () {\n            var values = this.values,\n                valcount = values.length,\n                xvalues = this.xvalues,\n                yvalues = this.yvalues,\n                yminmax = this.yminmax,\n                i, val, isStr, isArray, sp;\n            for (i = 0; i < valcount; i++) {\n                val = values[i];\n                isStr = typeof(values[i]) === 'string';\n                isArray = typeof(values[i]) === 'object' && values[i] instanceof Array;\n                sp = isStr && values[i].split(':');\n                if (isStr && sp.length === 2) { // x:y\n                    xvalues.push(Number(sp[0]));\n                    yvalues.push(Number(sp[1]));\n                    yminmax.push(Number(sp[1]));\n                } else if (isArray) {\n                    xvalues.push(val[0]);\n                    yvalues.push(val[1]);\n                    yminmax.push(val[1]);\n                } else {\n                    xvalues.push(i);\n                    if (values[i] === null || values[i] === 'null') {\n                        yvalues.push(null);\n                    } else {\n                        yvalues.push(Number(val));\n                        yminmax.push(Number(val));\n                    }\n                }\n            }\n            if (this.options.get('xvalues')) {\n                xvalues = this.options.get('xvalues');\n            }\n\n            this.maxy = this.maxyorg = Math.max.apply(Math, yminmax);\n            this.miny = this.minyorg = Math.min.apply(Math, yminmax);\n\n            this.maxx = Math.max.apply(Math, xvalues);\n            this.minx = Math.min.apply(Math, xvalues);\n\n            this.xvalues = xvalues;\n            this.yvalues = yvalues;\n            this.yminmax = yminmax;\n\n        },\n\n        processRangeOptions: function () {\n            var options = this.options,\n                normalRangeMin = options.get('normalRangeMin'),\n                normalRangeMax = options.get('normalRangeMax');\n\n            if (normalRangeMin !== undefined) {\n                if (normalRangeMin < this.miny) {\n                    this.miny = normalRangeMin;\n                }\n                if (normalRangeMax > this.maxy) {\n                    this.maxy = normalRangeMax;\n                }\n            }\n            if (options.get('chartRangeMin') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMin') < this.miny)) {\n                this.miny = options.get('chartRangeMin');\n            }\n            if (options.get('chartRangeMax') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMax') > this.maxy)) {\n                this.maxy = options.get('chartRangeMax');\n            }\n            if (options.get('chartRangeMinX') !== undefined && (options.get('chartRangeClipX') || options.get('chartRangeMinX') < this.minx)) {\n                this.minx = options.get('chartRangeMinX');\n            }\n            if (options.get('chartRangeMaxX') !== undefined && (options.get('chartRangeClipX') || options.get('chartRangeMaxX') > this.maxx)) {\n                this.maxx = options.get('chartRangeMaxX');\n            }\n\n        },\n\n        drawNormalRange: function (canvasLeft, canvasTop, canvasHeight, canvasWidth, rangey) {\n            var normalRangeMin = this.options.get('normalRangeMin'),\n                normalRangeMax = this.options.get('normalRangeMax'),\n                ytop = canvasTop + Math.round(canvasHeight - (canvasHeight * ((normalRangeMax - this.miny) / rangey))),\n                height = Math.round((canvasHeight * (normalRangeMax - normalRangeMin)) / rangey);\n            this.target.drawRect(canvasLeft, ytop, canvasWidth, height, undefined, this.options.get('normalRangeColor')).append();\n        },\n\n        render: function () {\n            var options = this.options,\n                target = this.target,\n                canvasWidth = this.canvasWidth,\n                canvasHeight = this.canvasHeight,\n                vertices = this.vertices,\n                spotRadius = options.get('spotRadius'),\n                regionMap = this.regionMap,\n                rangex, rangey, yvallast,\n                canvasTop, canvasLeft,\n                vertex, path, paths, x, y, xnext, xpos, xposnext,\n                last, next, yvalcount, lineShapes, fillShapes, plen,\n                valueSpots, hlSpotsEnabled, color, xvalues, yvalues, i;\n\n            if (!line._super.render.call(this)) {\n                return;\n            }\n\n            this.scanValues();\n            this.processRangeOptions();\n\n            xvalues = this.xvalues;\n            yvalues = this.yvalues;\n\n            if (!this.yminmax.length || this.yvalues.length < 2) {\n                // empty or all null valuess\n                return;\n            }\n\n            canvasTop = canvasLeft = 0;\n\n            rangex = this.maxx - this.minx === 0 ? 1 : this.maxx - this.minx;\n            rangey = this.maxy - this.miny === 0 ? 1 : this.maxy - this.miny;\n            yvallast = this.yvalues.length - 1;\n\n            if (spotRadius && (canvasWidth < (spotRadius * 4) || canvasHeight < (spotRadius * 4))) {\n                spotRadius = 0;\n            }\n            if (spotRadius) {\n                // adjust the canvas size as required so that spots will fit\n                hlSpotsEnabled = options.get('highlightSpotColor') &&  !options.get('disableInteraction');\n                if (hlSpotsEnabled || options.get('minSpotColor') || (options.get('spotColor') && yvalues[yvallast] === this.miny)) {\n                    canvasHeight -= Math.ceil(spotRadius);\n                }\n                if (hlSpotsEnabled || options.get('maxSpotColor') || (options.get('spotColor') && yvalues[yvallast] === this.maxy)) {\n                    canvasHeight -= Math.ceil(spotRadius);\n                    canvasTop += Math.ceil(spotRadius);\n                }\n                if (hlSpotsEnabled ||\n                     ((options.get('minSpotColor') || options.get('maxSpotColor')) && (yvalues[0] === this.miny || yvalues[0] === this.maxy))) {\n                    canvasLeft += Math.ceil(spotRadius);\n                    canvasWidth -= Math.ceil(spotRadius);\n                }\n                if (hlSpotsEnabled || options.get('spotColor') ||\n                    (options.get('minSpotColor') || options.get('maxSpotColor') &&\n                        (yvalues[yvallast] === this.miny || yvalues[yvallast] === this.maxy))) {\n                    canvasWidth -= Math.ceil(spotRadius);\n                }\n            }\n\n\n            canvasHeight--;\n\n            if (options.get('normalRangeMin') !== undefined && !options.get('drawNormalOnTop')) {\n                this.drawNormalRange(canvasLeft, canvasTop, canvasHeight, canvasWidth, rangey);\n            }\n\n            path = [];\n            paths = [path];\n            last = next = null;\n            yvalcount = yvalues.length;\n            for (i = 0; i < yvalcount; i++) {\n                x = xvalues[i];\n                xnext = xvalues[i + 1];\n                y = yvalues[i];\n                xpos = canvasLeft + Math.round((x - this.minx) * (canvasWidth / rangex));\n                xposnext = i < yvalcount - 1 ? canvasLeft + Math.round((xnext - this.minx) * (canvasWidth / rangex)) : canvasWidth;\n                next = xpos + ((xposnext - xpos) / 2);\n                regionMap[i] = [last || 0, next, i];\n                last = next;\n                if (y === null) {\n                    if (i) {\n                        if (yvalues[i - 1] !== null) {\n                            path = [];\n                            paths.push(path);\n                        }\n                        vertices.push(null);\n                    }\n                } else {\n                    if (y < this.miny) {\n                        y = this.miny;\n                    }\n                    if (y > this.maxy) {\n                        y = this.maxy;\n                    }\n                    if (!path.length) {\n                        // previous value was null\n                        path.push([xpos, canvasTop + canvasHeight]);\n                    }\n                    vertex = [xpos, canvasTop + Math.round(canvasHeight - (canvasHeight * ((y - this.miny) / rangey)))];\n                    path.push(vertex);\n                    vertices.push(vertex);\n                }\n            }\n\n            lineShapes = [];\n            fillShapes = [];\n            plen = paths.length;\n            for (i = 0; i < plen; i++) {\n                path = paths[i];\n                if (path.length) {\n                    if (options.get('fillColor')) {\n                        path.push([path[path.length - 1][0], (canvasTop + canvasHeight)]);\n                        fillShapes.push(path.slice(0));\n                        path.pop();\n                    }\n                    // if there's only a single point in this path, then we want to display it\n                    // as a vertical line which means we keep path[0]  as is\n                    if (path.length > 2) {\n                        // else we want the first value\n                        path[0] = [path[0][0], path[1][1]];\n                    }\n                    lineShapes.push(path);\n                }\n            }\n\n            // draw the fill first, then optionally the normal range, then the line on top of that\n            plen = fillShapes.length;\n            for (i = 0; i < plen; i++) {\n                target.drawShape(fillShapes[i],\n                    options.get('fillColor'), options.get('fillColor')).append();\n            }\n\n            if (options.get('normalRangeMin') !== undefined && options.get('drawNormalOnTop')) {\n                this.drawNormalRange(canvasLeft, canvasTop, canvasHeight, canvasWidth, rangey);\n            }\n\n            plen = lineShapes.length;\n            for (i = 0; i < plen; i++) {\n                target.drawShape(lineShapes[i], options.get('lineColor'), undefined,\n                    options.get('lineWidth')).append();\n            }\n\n            if (spotRadius && options.get('valueSpots')) {\n                valueSpots = options.get('valueSpots');\n                if (valueSpots.get === undefined) {\n                    valueSpots = new RangeMap(valueSpots);\n                }\n                for (i = 0; i < yvalcount; i++) {\n                    color = valueSpots.get(yvalues[i]);\n                    if (color) {\n                        target.drawCircle(canvasLeft + Math.round((xvalues[i] - this.minx) * (canvasWidth / rangex)),\n                            canvasTop + Math.round(canvasHeight - (canvasHeight * ((yvalues[i] - this.miny) / rangey))),\n                            spotRadius, undefined,\n                            color).append();\n                    }\n                }\n\n            }\n            if (spotRadius && options.get('spotColor') && yvalues[yvallast] !== null) {\n                target.drawCircle(canvasLeft + Math.round((xvalues[xvalues.length - 1] - this.minx) * (canvasWidth / rangex)),\n                    canvasTop + Math.round(canvasHeight - (canvasHeight * ((yvalues[yvallast] - this.miny) / rangey))),\n                    spotRadius, undefined,\n                    options.get('spotColor')).append();\n            }\n            if (this.maxy !== this.minyorg) {\n                if (spotRadius && options.get('minSpotColor')) {\n                    x = xvalues[$.inArray(this.minyorg, yvalues)];\n                    target.drawCircle(canvasLeft + Math.round((x - this.minx) * (canvasWidth / rangex)),\n                        canvasTop + Math.round(canvasHeight - (canvasHeight * ((this.minyorg - this.miny) / rangey))),\n                        spotRadius, undefined,\n                        options.get('minSpotColor')).append();\n                }\n                if (spotRadius && options.get('maxSpotColor')) {\n                    x = xvalues[$.inArray(this.maxyorg, yvalues)];\n                    target.drawCircle(canvasLeft + Math.round((x - this.minx) * (canvasWidth / rangex)),\n                        canvasTop + Math.round(canvasHeight - (canvasHeight * ((this.maxyorg - this.miny) / rangey))),\n                        spotRadius, undefined,\n                        options.get('maxSpotColor')).append();\n                }\n            }\n\n            this.lastShapeId = target.getLastShapeId();\n            this.canvasTop = canvasTop;\n            target.render();\n        }\n    });\n\n    /**\n     * Bar charts\n     */\n    $.fn.sparkline.bar = bar = createClass($.fn.sparkline._base, barHighlightMixin, {\n        type: 'bar',\n\n        init: function (el, values, options, width, height) {\n            var barWidth = parseInt(options.get('barWidth'), 10),\n                barSpacing = parseInt(options.get('barSpacing'), 10),\n                chartRangeMin = options.get('chartRangeMin'),\n                chartRangeMax = options.get('chartRangeMax'),\n                chartRangeClip = options.get('chartRangeClip'),\n                stackMin = Infinity,\n                stackMax = -Infinity,\n                isStackString, groupMin, groupMax, stackRanges,\n                numValues, i, vlen, range, zeroAxis, xaxisOffset, min, max, clipMin, clipMax,\n                stacked, vlist, j, slen, svals, val, yoffset, yMaxCalc, canvasHeightEf;\n            bar._super.init.call(this, el, values, options, width, height);\n\n            // scan values to determine whether to stack bars\n            for (i = 0, vlen = values.length; i < vlen; i++) {\n                val = values[i];\n                isStackString = typeof(val) === 'string' && val.indexOf(':') > -1;\n                if (isStackString || $.isArray(val)) {\n                    stacked = true;\n                    if (isStackString) {\n                        val = values[i] = normalizeValues(val.split(':'));\n                    }\n                    val = remove(val, null); // min/max will treat null as zero\n                    groupMin = Math.min.apply(Math, val);\n                    groupMax = Math.max.apply(Math, val);\n                    if (groupMin < stackMin) {\n                        stackMin = groupMin;\n                    }\n                    if (groupMax > stackMax) {\n                        stackMax = groupMax;\n                    }\n                }\n            }\n\n            this.stacked = stacked;\n            this.regionShapes = {};\n            this.barWidth = barWidth;\n            this.barSpacing = barSpacing;\n            this.totalBarWidth = barWidth + barSpacing;\n            this.width = width = (values.length * barWidth) + ((values.length - 1) * barSpacing);\n\n            this.initTarget();\n\n            if (chartRangeClip) {\n                clipMin = chartRangeMin === undefined ? -Infinity : chartRangeMin;\n                clipMax = chartRangeMax === undefined ? Infinity : chartRangeMax;\n            }\n\n            numValues = [];\n            stackRanges = stacked ? [] : numValues;\n            var stackTotals = [];\n            var stackRangesNeg = [];\n            for (i = 0, vlen = values.length; i < vlen; i++) {\n                if (stacked) {\n                    vlist = values[i];\n                    values[i] = svals = [];\n                    stackTotals[i] = 0;\n                    stackRanges[i] = stackRangesNeg[i] = 0;\n                    for (j = 0, slen = vlist.length; j < slen; j++) {\n                        val = svals[j] = chartRangeClip ? clipval(vlist[j], clipMin, clipMax) : vlist[j];\n                        if (val !== null) {\n                            if (val > 0) {\n                                stackTotals[i] += val;\n                            }\n                            if (stackMin < 0 && stackMax > 0) {\n                                if (val < 0) {\n                                    stackRangesNeg[i] += Math.abs(val);\n                                } else {\n                                    stackRanges[i] += val;\n                                }\n                            } else {\n                                stackRanges[i] += Math.abs(val - (val < 0 ? stackMax : stackMin));\n                            }\n                            numValues.push(val);\n                        }\n                    }\n                } else {\n                    val = chartRangeClip ? clipval(values[i], clipMin, clipMax) : values[i];\n                    val = values[i] = normalizeValue(val);\n                    if (val !== null) {\n                        numValues.push(val);\n                    }\n                }\n            }\n            this.max = max = Math.max.apply(Math, numValues);\n            this.min = min = Math.min.apply(Math, numValues);\n            this.stackMax = stackMax = stacked ? Math.max.apply(Math, stackTotals) : max;\n            this.stackMin = stackMin = stacked ? Math.min.apply(Math, numValues) : min;\n\n            if (options.get('chartRangeMin') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMin') < min)) {\n                min = options.get('chartRangeMin');\n            }\n            if (options.get('chartRangeMax') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMax') > max)) {\n                max = options.get('chartRangeMax');\n            }\n\n            this.zeroAxis = zeroAxis = options.get('zeroAxis', true);\n            if (min <= 0 && max >= 0 && zeroAxis) {\n                xaxisOffset = 0;\n            } else if (zeroAxis == false) {\n                xaxisOffset = min;\n            } else if (min > 0) {\n                xaxisOffset = min;\n            } else {\n                xaxisOffset = max;\n            }\n            this.xaxisOffset = xaxisOffset;\n\n            range = stacked ? (Math.max.apply(Math, stackRanges) + Math.max.apply(Math, stackRangesNeg)) : max - min;\n\n            // as we plot zero/min values a single pixel line, we add a pixel to all other\n            // values - Reduce the effective canvas size to suit\n            this.canvasHeightEf = (zeroAxis && min < 0) ? this.canvasHeight - 2 : this.canvasHeight - 1;\n\n            if (min < xaxisOffset) {\n                yMaxCalc = (stacked && max >= 0) ? stackMax : max;\n                yoffset = (yMaxCalc - xaxisOffset) / range * this.canvasHeight;\n                if (yoffset !== Math.ceil(yoffset)) {\n                    this.canvasHeightEf -= 2;\n                    yoffset = Math.ceil(yoffset);\n                }\n            } else {\n                yoffset = this.canvasHeight;\n            }\n            this.yoffset = yoffset;\n\n            if ($.isArray(options.get('colorMap'))) {\n                this.colorMapByIndex = options.get('colorMap');\n                this.colorMapByValue = null;\n            } else {\n                this.colorMapByIndex = null;\n                this.colorMapByValue = options.get('colorMap');\n                if (this.colorMapByValue && this.colorMapByValue.get === undefined) {\n                    this.colorMapByValue = new RangeMap(this.colorMapByValue);\n                }\n            }\n\n            this.range = range;\n        },\n\n        getRegion: function (el, x, y) {\n            var result = Math.floor(x / this.totalBarWidth);\n            return (result < 0 || result >= this.values.length) ? undefined : result;\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion,\n                values = ensureArray(this.values[currentRegion]),\n                result = [],\n                value, i;\n            for (i = values.length; i--;) {\n                value = values[i];\n                result.push({\n                    isNull: value === null,\n                    value: value,\n                    color: this.calcColor(i, value, currentRegion),\n                    offset: currentRegion\n                });\n            }\n            return result;\n        },\n\n        calcColor: function (stacknum, value, valuenum) {\n            var colorMapByIndex = this.colorMapByIndex,\n                colorMapByValue = this.colorMapByValue,\n                options = this.options,\n                color, newColor;\n            if (this.stacked) {\n                color = options.get('stackedBarColor');\n            } else {\n                color = (value < 0) ? options.get('negBarColor') : options.get('barColor');\n            }\n            if (value === 0 && options.get('zeroColor') !== undefined) {\n                color = options.get('zeroColor');\n            }\n            if (colorMapByValue && (newColor = colorMapByValue.get(value))) {\n                color = newColor;\n            } else if (colorMapByIndex && colorMapByIndex.length > valuenum) {\n                color = colorMapByIndex[valuenum];\n            }\n            return $.isArray(color) ? color[stacknum % color.length] : color;\n        },\n\n        /**\n         * Render bar(s) for a region\n         */\n        renderRegion: function (valuenum, highlight) {\n            var vals = this.values[valuenum],\n                options = this.options,\n                xaxisOffset = this.xaxisOffset,\n                result = [],\n                range = this.range,\n                stacked = this.stacked,\n                target = this.target,\n                x = valuenum * this.totalBarWidth,\n                canvasHeightEf = this.canvasHeightEf,\n                yoffset = this.yoffset,\n                y, height, color, isNull, yoffsetNeg, i, valcount, val, minPlotted, allMin;\n\n            vals = $.isArray(vals) ? vals : [vals];\n            valcount = vals.length;\n            val = vals[0];\n            isNull = all(null, vals);\n            allMin = all(xaxisOffset, vals, true);\n\n            if (isNull) {\n                if (options.get('nullColor')) {\n                    color = highlight ? options.get('nullColor') : this.calcHighlightColor(options.get('nullColor'), options);\n                    y = (yoffset > 0) ? yoffset - 1 : yoffset;\n                    return target.drawRect(x, y, this.barWidth - 1, 0, color, color);\n                } else {\n                    return undefined;\n                }\n            }\n            yoffsetNeg = yoffset;\n            for (i = 0; i < valcount; i++) {\n                val = vals[i];\n\n                if (stacked && val === xaxisOffset) {\n                    if (!allMin || minPlotted) {\n                        continue;\n                    }\n                    minPlotted = true;\n                }\n\n                if (range > 0) {\n                    height = Math.floor(canvasHeightEf * ((Math.abs(val - xaxisOffset) / range))) + 1;\n                } else {\n                    height = 1;\n                }\n                if (val < xaxisOffset || (val === xaxisOffset && yoffset === 0)) {\n                    y = yoffsetNeg;\n                    yoffsetNeg += height;\n                } else {\n                    y = yoffset - height;\n                    yoffset -= height;\n                }\n                color = this.calcColor(i, val, valuenum);\n                if (highlight) {\n                    color = this.calcHighlightColor(color, options);\n                }\n                result.push(target.drawRect(x, y, this.barWidth - 1, height - 1, color, color));\n            }\n            if (result.length === 1) {\n                return result[0];\n            }\n            return result;\n        }\n    });\n\n    /**\n     * Tristate charts\n     */\n    $.fn.sparkline.tristate = tristate = createClass($.fn.sparkline._base, barHighlightMixin, {\n        type: 'tristate',\n\n        init: function (el, values, options, width, height) {\n            var barWidth = parseInt(options.get('barWidth'), 10),\n                barSpacing = parseInt(options.get('barSpacing'), 10);\n            tristate._super.init.call(this, el, values, options, width, height);\n\n            this.regionShapes = {};\n            this.barWidth = barWidth;\n            this.barSpacing = barSpacing;\n            this.totalBarWidth = barWidth + barSpacing;\n            this.values = $.map(values, Number);\n            this.width = width = (values.length * barWidth) + ((values.length - 1) * barSpacing);\n\n            if ($.isArray(options.get('colorMap'))) {\n                this.colorMapByIndex = options.get('colorMap');\n                this.colorMapByValue = null;\n            } else {\n                this.colorMapByIndex = null;\n                this.colorMapByValue = options.get('colorMap');\n                if (this.colorMapByValue && this.colorMapByValue.get === undefined) {\n                    this.colorMapByValue = new RangeMap(this.colorMapByValue);\n                }\n            }\n            this.initTarget();\n        },\n\n        getRegion: function (el, x, y) {\n            return Math.floor(x / this.totalBarWidth);\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                isNull: this.values[currentRegion] === undefined,\n                value: this.values[currentRegion],\n                color: this.calcColor(this.values[currentRegion], currentRegion),\n                offset: currentRegion\n            };\n        },\n\n        calcColor: function (value, valuenum) {\n            var values = this.values,\n                options = this.options,\n                colorMapByIndex = this.colorMapByIndex,\n                colorMapByValue = this.colorMapByValue,\n                color, newColor;\n\n            if (colorMapByValue && (newColor = colorMapByValue.get(value))) {\n                color = newColor;\n            } else if (colorMapByIndex && colorMapByIndex.length > valuenum) {\n                color = colorMapByIndex[valuenum];\n            } else if (values[valuenum] < 0) {\n                color = options.get('negBarColor');\n            } else if (values[valuenum] > 0) {\n                color = options.get('posBarColor');\n            } else {\n                color = options.get('zeroBarColor');\n            }\n            return color;\n        },\n\n        renderRegion: function (valuenum, highlight) {\n            var values = this.values,\n                options = this.options,\n                target = this.target,\n                canvasHeight, height, halfHeight,\n                x, y, color;\n\n            canvasHeight = target.pixelHeight;\n            halfHeight = Math.round(canvasHeight / 2);\n\n            x = valuenum * this.totalBarWidth;\n            if (values[valuenum] < 0) {\n                y = halfHeight;\n                height = halfHeight - 1;\n            } else if (values[valuenum] > 0) {\n                y = 0;\n                height = halfHeight - 1;\n            } else {\n                y = halfHeight - 1;\n                height = 2;\n            }\n            color = this.calcColor(values[valuenum], valuenum);\n            if (color === null) {\n                return;\n            }\n            if (highlight) {\n                color = this.calcHighlightColor(color, options);\n            }\n            return target.drawRect(x, y, this.barWidth - 1, height - 1, color, color);\n        }\n    });\n\n    /**\n     * Discrete charts\n     */\n    $.fn.sparkline.discrete = discrete = createClass($.fn.sparkline._base, barHighlightMixin, {\n        type: 'discrete',\n\n        init: function (el, values, options, width, height) {\n            discrete._super.init.call(this, el, values, options, width, height);\n\n            this.regionShapes = {};\n            this.values = values = $.map(values, Number);\n            this.min = Math.min.apply(Math, values);\n            this.max = Math.max.apply(Math, values);\n            this.range = this.max - this.min;\n            this.width = width = options.get('width') === 'auto' ? values.length * 2 : this.width;\n            this.interval = Math.floor(width / values.length);\n            this.itemWidth = width / values.length;\n            if (options.get('chartRangeMin') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMin') < this.min)) {\n                this.min = options.get('chartRangeMin');\n            }\n            if (options.get('chartRangeMax') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMax') > this.max)) {\n                this.max = options.get('chartRangeMax');\n            }\n            this.initTarget();\n            if (this.target) {\n                this.lineHeight = options.get('lineHeight') === 'auto' ? Math.round(this.canvasHeight * 0.3) : options.get('lineHeight');\n            }\n        },\n\n        getRegion: function (el, x, y) {\n            return Math.floor(x / this.itemWidth);\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                isNull: this.values[currentRegion] === undefined,\n                value: this.values[currentRegion],\n                offset: currentRegion\n            };\n        },\n\n        renderRegion: function (valuenum, highlight) {\n            var values = this.values,\n                options = this.options,\n                min = this.min,\n                max = this.max,\n                range = this.range,\n                interval = this.interval,\n                target = this.target,\n                canvasHeight = this.canvasHeight,\n                lineHeight = this.lineHeight,\n                pheight = canvasHeight - lineHeight,\n                ytop, val, color, x;\n\n            val = clipval(values[valuenum], min, max);\n            x = valuenum * interval;\n            ytop = Math.round(pheight - pheight * ((val - min) / range));\n            color = (options.get('thresholdColor') && val < options.get('thresholdValue')) ? options.get('thresholdColor') : options.get('lineColor');\n            if (highlight) {\n                color = this.calcHighlightColor(color, options);\n            }\n            return target.drawLine(x, ytop, x, ytop + lineHeight, color);\n        }\n    });\n\n    /**\n     * Bullet charts\n     */\n    $.fn.sparkline.bullet = bullet = createClass($.fn.sparkline._base, {\n        type: 'bullet',\n\n        init: function (el, values, options, width, height) {\n            var min, max, vals;\n            bullet._super.init.call(this, el, values, options, width, height);\n\n            // values: target, performance, range1, range2, range3\n            this.values = values = normalizeValues(values);\n            // target or performance could be null\n            vals = values.slice();\n            vals[0] = vals[0] === null ? vals[2] : vals[0];\n            vals[1] = values[1] === null ? vals[2] : vals[1];\n            min = Math.min.apply(Math, values);\n            max = Math.max.apply(Math, values);\n            if (options.get('base') === undefined) {\n                min = min < 0 ? min : 0;\n            } else {\n                min = options.get('base');\n            }\n            this.min = min;\n            this.max = max;\n            this.range = max - min;\n            this.shapes = {};\n            this.valueShapes = {};\n            this.regiondata = {};\n            this.width = width = options.get('width') === 'auto' ? '4.0em' : width;\n            this.target = this.$el.simpledraw(width, height, options.get('composite'));\n            if (!values.length) {\n                this.disabled = true;\n            }\n            this.initTarget();\n        },\n\n        getRegion: function (el, x, y) {\n            var shapeid = this.target.getShapeAt(el, x, y);\n            return (shapeid !== undefined && this.shapes[shapeid] !== undefined) ? this.shapes[shapeid] : undefined;\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                fieldkey: currentRegion.substr(0, 1),\n                value: this.values[currentRegion.substr(1)],\n                region: currentRegion\n            };\n        },\n\n        changeHighlight: function (highlight) {\n            var currentRegion = this.currentRegion,\n                shapeid = this.valueShapes[currentRegion],\n                shape;\n            delete this.shapes[shapeid];\n            switch (currentRegion.substr(0, 1)) {\n                case 'r':\n                    shape = this.renderRange(currentRegion.substr(1), highlight);\n                    break;\n                case 'p':\n                    shape = this.renderPerformance(highlight);\n                    break;\n                case 't':\n                    shape = this.renderTarget(highlight);\n                    break;\n            }\n            this.valueShapes[currentRegion] = shape.id;\n            this.shapes[shape.id] = currentRegion;\n            this.target.replaceWithShape(shapeid, shape);\n        },\n\n        renderRange: function (rn, highlight) {\n            var rangeval = this.values[rn],\n                rangewidth = Math.round(this.canvasWidth * ((rangeval - this.min) / this.range)),\n                color = this.options.get('rangeColors')[rn - 2];\n            if (highlight) {\n                color = this.calcHighlightColor(color, this.options);\n            }\n            return this.target.drawRect(0, 0, rangewidth - 1, this.canvasHeight - 1, color, color);\n        },\n\n        renderPerformance: function (highlight) {\n            var perfval = this.values[1],\n                perfwidth = Math.round(this.canvasWidth * ((perfval - this.min) / this.range)),\n                color = this.options.get('performanceColor');\n            if (highlight) {\n                color = this.calcHighlightColor(color, this.options);\n            }\n            return this.target.drawRect(0, Math.round(this.canvasHeight * 0.3), perfwidth - 1,\n                Math.round(this.canvasHeight * 0.4) - 1, color, color);\n        },\n\n        renderTarget: function (highlight) {\n            var targetval = this.values[0],\n                x = Math.round(this.canvasWidth * ((targetval - this.min) / this.range) - (this.options.get('targetWidth') / 2)),\n                targettop = Math.round(this.canvasHeight * 0.10),\n                targetheight = this.canvasHeight - (targettop * 2),\n                color = this.options.get('targetColor');\n            if (highlight) {\n                color = this.calcHighlightColor(color, this.options);\n            }\n            return this.target.drawRect(x, targettop, this.options.get('targetWidth') - 1, targetheight - 1, color, color);\n        },\n\n        render: function () {\n            var vlen = this.values.length,\n                target = this.target,\n                i, shape;\n            if (!bullet._super.render.call(this)) {\n                return;\n            }\n            for (i = 2; i < vlen; i++) {\n                shape = this.renderRange(i).append();\n                this.shapes[shape.id] = 'r' + i;\n                this.valueShapes['r' + i] = shape.id;\n            }\n            if (this.values[1] !== null) {\n                shape = this.renderPerformance().append();\n                this.shapes[shape.id] = 'p1';\n                this.valueShapes.p1 = shape.id;\n            }\n            if (this.values[0] !== null) {\n                shape = this.renderTarget().append();\n                this.shapes[shape.id] = 't0';\n                this.valueShapes.t0 = shape.id;\n            }\n            target.render();\n        }\n    });\n\n    /**\n     * Pie charts\n     */\n    $.fn.sparkline.pie = pie = createClass($.fn.sparkline._base, {\n        type: 'pie',\n\n        init: function (el, values, options, width, height) {\n            var total = 0, i;\n\n            pie._super.init.call(this, el, values, options, width, height);\n\n            this.shapes = {}; // map shape ids to value offsets\n            this.valueShapes = {}; // maps value offsets to shape ids\n            this.values = values = $.map(values, Number);\n\n            if (options.get('width') === 'auto') {\n                this.width = this.height;\n            }\n\n            if (values.length > 0) {\n                for (i = values.length; i--;) {\n                    total += values[i];\n                }\n            }\n            this.total = total;\n            this.initTarget();\n            this.radius = Math.floor(Math.min(this.canvasWidth, this.canvasHeight) / 2);\n        },\n\n        getRegion: function (el, x, y) {\n            var shapeid = this.target.getShapeAt(el, x, y);\n            return (shapeid !== undefined && this.shapes[shapeid] !== undefined) ? this.shapes[shapeid] : undefined;\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                isNull: this.values[currentRegion] === undefined,\n                value: this.values[currentRegion],\n                percent: this.values[currentRegion] / this.total * 100,\n                color: this.options.get('sliceColors')[currentRegion % this.options.get('sliceColors').length],\n                offset: currentRegion\n            };\n        },\n\n        changeHighlight: function (highlight) {\n            var currentRegion = this.currentRegion,\n                 newslice = this.renderSlice(currentRegion, highlight),\n                 shapeid = this.valueShapes[currentRegion];\n            delete this.shapes[shapeid];\n            this.target.replaceWithShape(shapeid, newslice);\n            this.valueShapes[currentRegion] = newslice.id;\n            this.shapes[newslice.id] = currentRegion;\n        },\n\n        renderSlice: function (valuenum, highlight) {\n            var target = this.target,\n                options = this.options,\n                radius = this.radius,\n                borderWidth = options.get('borderWidth'),\n                offset = options.get('offset'),\n                circle = 2 * Math.PI,\n                values = this.values,\n                total = this.total,\n                next = offset ? (2*Math.PI)*(offset/360) : 0,\n                start, end, i, vlen, color;\n\n            vlen = values.length;\n            for (i = 0; i < vlen; i++) {\n                start = next;\n                end = next;\n                if (total > 0) {  // avoid divide by zero\n                    end = next + (circle * (values[i] / total));\n                }\n                if (valuenum === i) {\n                    color = options.get('sliceColors')[i % options.get('sliceColors').length];\n                    if (highlight) {\n                        color = this.calcHighlightColor(color, options);\n                    }\n\n                    return target.drawPieSlice(radius, radius, radius - borderWidth, start, end, undefined, color);\n                }\n                next = end;\n            }\n        },\n\n        render: function () {\n            var target = this.target,\n                values = this.values,\n                options = this.options,\n                radius = this.radius,\n                borderWidth = options.get('borderWidth'),\n                donutWidth = options.get('donutWidth'),\n                shape, i;\n\n            if (!pie._super.render.call(this)) {\n                return;\n            }\n            if (borderWidth) {\n                target.drawCircle(radius, radius, Math.floor(radius - (borderWidth / 2)),\n                    options.get('borderColor'), undefined, borderWidth).append();\n            }\n            for (i = values.length; i--;) {\n                if (values[i]) { // don't render zero values\n                    shape = this.renderSlice(i).append();\n                    this.valueShapes[i] = shape.id; // store just the shapeid\n                    this.shapes[shape.id] = i;\n                }\n            }\n            if (donutWidth) {\n                target.drawCircle(radius, radius, radius - donutWidth, options.get('donutColor'), \n                    options.get('donutColor'), 0).append();\n            }\n            target.render();\n        }\n    });\n\n    /**\n     * Box plots\n     */\n    $.fn.sparkline.box = box = createClass($.fn.sparkline._base, {\n        type: 'box',\n\n        init: function (el, values, options, width, height) {\n            box._super.init.call(this, el, values, options, width, height);\n            this.values = $.map(values, Number);\n            this.width = options.get('width') === 'auto' ? '4.0em' : width;\n            this.initTarget();\n            if (!this.values.length) {\n                this.disabled = 1;\n            }\n        },\n\n        /**\n         * Simulate a single region\n         */\n        getRegion: function () {\n            return 1;\n        },\n\n        getCurrentRegionFields: function () {\n            var result = [\n                { field: 'lq', value: this.quartiles[0] },\n                { field: 'med', value: this.quartiles[1] },\n                { field: 'uq', value: this.quartiles[2] }\n            ];\n            if (this.loutlier !== undefined) {\n                result.push({ field: 'lo', value: this.loutlier});\n            }\n            if (this.routlier !== undefined) {\n                result.push({ field: 'ro', value: this.routlier});\n            }\n            if (this.lwhisker !== undefined) {\n                result.push({ field: 'lw', value: this.lwhisker});\n            }\n            if (this.rwhisker !== undefined) {\n                result.push({ field: 'rw', value: this.rwhisker});\n            }\n            return result;\n        },\n\n        render: function () {\n            var target = this.target,\n                values = this.values,\n                vlen = values.length,\n                options = this.options,\n                canvasWidth = this.canvasWidth,\n                canvasHeight = this.canvasHeight,\n                minValue = options.get('chartRangeMin') === undefined ? Math.min.apply(Math, values) : options.get('chartRangeMin'),\n                maxValue = options.get('chartRangeMax') === undefined ? Math.max.apply(Math, values) : options.get('chartRangeMax'),\n                canvasLeft = 0,\n                lwhisker, loutlier, iqr, q1, q2, q3, rwhisker, routlier, i,\n                size, unitSize;\n\n            if (!box._super.render.call(this)) {\n                return;\n            }\n\n            if (options.get('raw')) {\n                if (options.get('showOutliers') && values.length > 5) {\n                    loutlier = values[0];\n                    lwhisker = values[1];\n                    q1 = values[2];\n                    q2 = values[3];\n                    q3 = values[4];\n                    rwhisker = values[5];\n                    routlier = values[6];\n                } else {\n                    lwhisker = values[0];\n                    q1 = values[1];\n                    q2 = values[2];\n                    q3 = values[3];\n                    rwhisker = values[4];\n                }\n            } else {\n                values.sort(function (a, b) { return a - b; });\n                q1 = quartile(values, 1);\n                q2 = quartile(values, 2);\n                q3 = quartile(values, 3);\n                iqr = q3 - q1;\n                if (options.get('showOutliers')) {\n                    lwhisker = rwhisker = undefined;\n                    for (i = 0; i < vlen; i++) {\n                        if (lwhisker === undefined && values[i] > q1 - (iqr * options.get('outlierIQR'))) {\n                            lwhisker = values[i];\n                        }\n                        if (values[i] < q3 + (iqr * options.get('outlierIQR'))) {\n                            rwhisker = values[i];\n                        }\n                    }\n                    loutlier = values[0];\n                    routlier = values[vlen - 1];\n                } else {\n                    lwhisker = values[0];\n                    rwhisker = values[vlen - 1];\n                }\n            }\n            this.quartiles = [q1, q2, q3];\n            this.lwhisker = lwhisker;\n            this.rwhisker = rwhisker;\n            this.loutlier = loutlier;\n            this.routlier = routlier;\n\n            unitSize = canvasWidth / (maxValue - minValue + 1);\n            if (options.get('showOutliers')) {\n                canvasLeft = Math.ceil(options.get('spotRadius'));\n                canvasWidth -= 2 * Math.ceil(options.get('spotRadius'));\n                unitSize = canvasWidth / (maxValue - minValue + 1);\n                if (loutlier < lwhisker) {\n                    target.drawCircle((loutlier - minValue) * unitSize + canvasLeft,\n                        canvasHeight / 2,\n                        options.get('spotRadius'),\n                        options.get('outlierLineColor'),\n                        options.get('outlierFillColor')).append();\n                }\n                if (routlier > rwhisker) {\n                    target.drawCircle((routlier - minValue) * unitSize + canvasLeft,\n                        canvasHeight / 2,\n                        options.get('spotRadius'),\n                        options.get('outlierLineColor'),\n                        options.get('outlierFillColor')).append();\n                }\n            }\n\n            // box\n            target.drawRect(\n                Math.round((q1 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight * 0.1),\n                Math.round((q3 - q1) * unitSize),\n                Math.round(canvasHeight * 0.8),\n                options.get('boxLineColor'),\n                options.get('boxFillColor')).append();\n            // left whisker\n            target.drawLine(\n                Math.round((lwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 2),\n                Math.round((q1 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 2),\n                options.get('lineColor')).append();\n            target.drawLine(\n                Math.round((lwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 4),\n                Math.round((lwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight - canvasHeight / 4),\n                options.get('whiskerColor')).append();\n            // right whisker\n            target.drawLine(Math.round((rwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 2),\n                Math.round((q3 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 2),\n                options.get('lineColor')).append();\n            target.drawLine(\n                Math.round((rwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 4),\n                Math.round((rwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight - canvasHeight / 4),\n                options.get('whiskerColor')).append();\n            // median line\n            target.drawLine(\n                Math.round((q2 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight * 0.1),\n                Math.round((q2 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight * 0.9),\n                options.get('medianColor')).append();\n            if (options.get('target')) {\n                size = Math.ceil(options.get('spotRadius'));\n                target.drawLine(\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft),\n                    Math.round((canvasHeight / 2) - size),\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft),\n                    Math.round((canvasHeight / 2) + size),\n                    options.get('targetColor')).append();\n                target.drawLine(\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft - size),\n                    Math.round(canvasHeight / 2),\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft + size),\n                    Math.round(canvasHeight / 2),\n                    options.get('targetColor')).append();\n            }\n            target.render();\n        }\n    });\n\n    // Setup a very simple \"virtual canvas\" to make drawing the few shapes we need easier\n    // This is accessible as $(foo).simpledraw()\n\n    VShape = createClass({\n        init: function (target, id, type, args) {\n            this.target = target;\n            this.id = id;\n            this.type = type;\n            this.args = args;\n        },\n        append: function () {\n            this.target.appendShape(this);\n            return this;\n        }\n    });\n\n    VCanvas_base = createClass({\n        _pxregex: /(\\d+)(px)?\\s*$/i,\n\n        init: function (width, height, target) {\n            if (!width) {\n                return;\n            }\n            this.width = width;\n            this.height = height;\n            this.target = target;\n            this.lastShapeId = null;\n            if (target[0]) {\n                target = target[0];\n            }\n            $.data(target, '_jqs_vcanvas', this);\n        },\n\n        drawLine: function (x1, y1, x2, y2, lineColor, lineWidth) {\n            return this.drawShape([[x1, y1], [x2, y2]], lineColor, lineWidth);\n        },\n\n        drawShape: function (path, lineColor, fillColor, lineWidth) {\n            return this._genShape('Shape', [path, lineColor, fillColor, lineWidth]);\n        },\n\n        drawCircle: function (x, y, radius, lineColor, fillColor, lineWidth) {\n            return this._genShape('Circle', [x, y, radius, lineColor, fillColor, lineWidth]);\n        },\n\n        drawPieSlice: function (x, y, radius, startAngle, endAngle, lineColor, fillColor) {\n            return this._genShape('PieSlice', [x, y, radius, startAngle, endAngle, lineColor, fillColor]);\n        },\n\n        drawRect: function (x, y, width, height, lineColor, fillColor) {\n            return this._genShape('Rect', [x, y, width, height, lineColor, fillColor]);\n        },\n\n        getElement: function () {\n            return this.canvas;\n        },\n\n        /**\n         * Return the most recently inserted shape id\n         */\n        getLastShapeId: function () {\n            return this.lastShapeId;\n        },\n\n        /**\n         * Clear and reset the canvas\n         */\n        reset: function () {\n            alert('reset not implemented');\n        },\n\n        _insert: function (el, target) {\n            $(target).html(el);\n        },\n\n        /**\n         * Calculate the pixel dimensions of the canvas\n         */\n        _calculatePixelDims: function (width, height, canvas) {\n            // XXX This should probably be a configurable option\n            var match;\n            match = this._pxregex.exec(height);\n            if (match) {\n                this.pixelHeight = match[1];\n            } else {\n                this.pixelHeight = $(canvas).height();\n            }\n            match = this._pxregex.exec(width);\n            if (match) {\n                this.pixelWidth = match[1];\n            } else {\n                this.pixelWidth = $(canvas).width();\n            }\n        },\n\n        /**\n         * Generate a shape object and id for later rendering\n         */\n        _genShape: function (shapetype, shapeargs) {\n            var id = shapeCount++;\n            shapeargs.unshift(id);\n            return new VShape(this, id, shapetype, shapeargs);\n        },\n\n        /**\n         * Add a shape to the end of the render queue\n         */\n        appendShape: function (shape) {\n            alert('appendShape not implemented');\n        },\n\n        /**\n         * Replace one shape with another\n         */\n        replaceWithShape: function (shapeid, shape) {\n            alert('replaceWithShape not implemented');\n        },\n\n        /**\n         * Insert one shape after another in the render queue\n         */\n        insertAfterShape: function (shapeid, shape) {\n            alert('insertAfterShape not implemented');\n        },\n\n        /**\n         * Remove a shape from the queue\n         */\n        removeShapeId: function (shapeid) {\n            alert('removeShapeId not implemented');\n        },\n\n        /**\n         * Find a shape at the specified x/y co-ordinates\n         */\n        getShapeAt: function (el, x, y) {\n            alert('getShapeAt not implemented');\n        },\n\n        /**\n         * Render all queued shapes onto the canvas\n         */\n        render: function () {\n            alert('render not implemented');\n        }\n    });\n\n    VCanvas_canvas = createClass(VCanvas_base, {\n        init: function (width, height, target, interact) {\n            VCanvas_canvas._super.init.call(this, width, height, target);\n            this.canvas = document.createElement('canvas');\n            if (target[0]) {\n                target = target[0];\n            }\n            $.data(target, '_jqs_vcanvas', this);\n            $(this.canvas).css({ display: 'inline-block', width: width, height: height, verticalAlign: 'top' });\n            this._insert(this.canvas, target);\n            this._calculatePixelDims(width, height, this.canvas);\n            this.canvas.width = this.pixelWidth;\n            this.canvas.height = this.pixelHeight;\n            this.interact = interact;\n            this.shapes = {};\n            this.shapeseq = [];\n            this.currentTargetShapeId = undefined;\n            $(this.canvas).css({width: this.pixelWidth, height: this.pixelHeight});\n        },\n\n        _getContext: function (lineColor, fillColor, lineWidth) {\n            var context = this.canvas.getContext('2d');\n            if (lineColor !== undefined) {\n                context.strokeStyle = lineColor;\n            }\n            context.lineWidth = lineWidth === undefined ? 1 : lineWidth;\n            if (fillColor !== undefined) {\n                context.fillStyle = fillColor;\n            }\n            return context;\n        },\n\n        reset: function () {\n            var context = this._getContext();\n            context.clearRect(0, 0, this.pixelWidth, this.pixelHeight);\n            this.shapes = {};\n            this.shapeseq = [];\n            this.currentTargetShapeId = undefined;\n        },\n\n        _drawShape: function (shapeid, path, lineColor, fillColor, lineWidth) {\n            var context = this._getContext(lineColor, fillColor, lineWidth),\n                i, plen;\n            context.beginPath();\n            context.moveTo(path[0][0] + 0.5, path[0][1] + 0.5);\n            for (i = 1, plen = path.length; i < plen; i++) {\n                context.lineTo(path[i][0] + 0.5, path[i][1] + 0.5); // the 0.5 offset gives us crisp pixel-width lines\n            }\n            if (lineColor !== undefined) {\n                context.stroke();\n            }\n            if (fillColor !== undefined) {\n                context.fill();\n            }\n            if (this.targetX !== undefined && this.targetY !== undefined &&\n                context.isPointInPath(this.targetX, this.targetY)) {\n                this.currentTargetShapeId = shapeid;\n            }\n        },\n\n        _drawCircle: function (shapeid, x, y, radius, lineColor, fillColor, lineWidth) {\n            var context = this._getContext(lineColor, fillColor, lineWidth);\n            context.beginPath();\n            context.arc(x, y, radius, 0, 2 * Math.PI, false);\n            if (this.targetX !== undefined && this.targetY !== undefined &&\n                context.isPointInPath(this.targetX, this.targetY)) {\n                this.currentTargetShapeId = shapeid;\n            }\n            if (lineColor !== undefined) {\n                context.stroke();\n            }\n            if (fillColor !== undefined) {\n                context.fill();\n            }\n        },\n\n        _drawPieSlice: function (shapeid, x, y, radius, startAngle, endAngle, lineColor, fillColor) {\n            var context = this._getContext(lineColor, fillColor);\n            context.beginPath();\n            context.moveTo(x, y);\n            context.arc(x, y, radius, startAngle, endAngle, false);\n            context.lineTo(x, y);\n            context.closePath();\n            if (lineColor !== undefined) {\n                context.stroke();\n            }\n            if (fillColor) {\n                context.fill();\n            }\n            if (this.targetX !== undefined && this.targetY !== undefined &&\n                context.isPointInPath(this.targetX, this.targetY)) {\n                this.currentTargetShapeId = shapeid;\n            }\n        },\n\n        _drawRect: function (shapeid, x, y, width, height, lineColor, fillColor) {\n            return this._drawShape(shapeid, [[x, y], [x + width, y], [x + width, y + height], [x, y + height], [x, y]], lineColor, fillColor);\n        },\n\n        appendShape: function (shape) {\n            this.shapes[shape.id] = shape;\n            this.shapeseq.push(shape.id);\n            this.lastShapeId = shape.id;\n            return shape.id;\n        },\n\n        replaceWithShape: function (shapeid, shape) {\n            var shapeseq = this.shapeseq,\n                i;\n            this.shapes[shape.id] = shape;\n            for (i = shapeseq.length; i--;) {\n                if (shapeseq[i] == shapeid) {\n                    shapeseq[i] = shape.id;\n                }\n            }\n            delete this.shapes[shapeid];\n        },\n\n        replaceWithShapes: function (shapeids, shapes) {\n            var shapeseq = this.shapeseq,\n                shapemap = {},\n                sid, i, first;\n\n            for (i = shapeids.length; i--;) {\n                shapemap[shapeids[i]] = true;\n            }\n            for (i = shapeseq.length; i--;) {\n                sid = shapeseq[i];\n                if (shapemap[sid]) {\n                    shapeseq.splice(i, 1);\n                    delete this.shapes[sid];\n                    first = i;\n                }\n            }\n            for (i = shapes.length; i--;) {\n                shapeseq.splice(first, 0, shapes[i].id);\n                this.shapes[shapes[i].id] = shapes[i];\n            }\n\n        },\n\n        insertAfterShape: function (shapeid, shape) {\n            var shapeseq = this.shapeseq,\n                i;\n            for (i = shapeseq.length; i--;) {\n                if (shapeseq[i] === shapeid) {\n                    shapeseq.splice(i + 1, 0, shape.id);\n                    this.shapes[shape.id] = shape;\n                    return;\n                }\n            }\n        },\n\n        removeShapeId: function (shapeid) {\n            var shapeseq = this.shapeseq,\n                i;\n            for (i = shapeseq.length; i--;) {\n                if (shapeseq[i] === shapeid) {\n                    shapeseq.splice(i, 1);\n                    break;\n                }\n            }\n            delete this.shapes[shapeid];\n        },\n\n        getShapeAt: function (el, x, y) {\n            this.targetX = x;\n            this.targetY = y;\n            this.render();\n            return this.currentTargetShapeId;\n        },\n\n        render: function () {\n            var shapeseq = this.shapeseq,\n                shapes = this.shapes,\n                shapeCount = shapeseq.length,\n                context = this._getContext(),\n                shapeid, shape, i;\n            context.clearRect(0, 0, this.pixelWidth, this.pixelHeight);\n            for (i = 0; i < shapeCount; i++) {\n                shapeid = shapeseq[i];\n                shape = shapes[shapeid];\n                this['_draw' + shape.type].apply(this, shape.args);\n            }\n            if (!this.interact) {\n                // not interactive so no need to keep the shapes array\n                this.shapes = {};\n                this.shapeseq = [];\n            }\n        }\n\n    });\n\n    VCanvas_vml = createClass(VCanvas_base, {\n        init: function (width, height, target) {\n            var groupel;\n            VCanvas_vml._super.init.call(this, width, height, target);\n            if (target[0]) {\n                target = target[0];\n            }\n            $.data(target, '_jqs_vcanvas', this);\n            this.canvas = document.createElement('span');\n            $(this.canvas).css({ display: 'inline-block', position: 'relative', overflow: 'hidden', width: width, height: height, margin: '0px', padding: '0px', verticalAlign: 'top'});\n            this._insert(this.canvas, target);\n            this._calculatePixelDims(width, height, this.canvas);\n            this.canvas.width = this.pixelWidth;\n            this.canvas.height = this.pixelHeight;\n            groupel = '<v:group coordorigin=\"0 0\" coordsize=\"' + this.pixelWidth + ' ' + this.pixelHeight + '\"' +\n                    ' style=\"position:absolute;top:0;left:0;width:' + this.pixelWidth + 'px;height=' + this.pixelHeight + 'px;\"></v:group>';\n            this.canvas.insertAdjacentHTML('beforeEnd', groupel);\n            this.group = $(this.canvas).children()[0];\n            this.rendered = false;\n            this.prerender = '';\n        },\n\n        _drawShape: function (shapeid, path, lineColor, fillColor, lineWidth) {\n            var vpath = [],\n                initial, stroke, fill, closed, vel, plen, i;\n            for (i = 0, plen = path.length; i < plen; i++) {\n                vpath[i] = '' + (path[i][0]) + ',' + (path[i][1]);\n            }\n            initial = vpath.splice(0, 1);\n            lineWidth = lineWidth === undefined ? 1 : lineWidth;\n            stroke = lineColor === undefined ? ' stroked=\"false\" ' : ' strokeWeight=\"' + lineWidth + 'px\" strokeColor=\"' + lineColor + '\" ';\n            fill = fillColor === undefined ? ' filled=\"false\"' : ' fillColor=\"' + fillColor + '\" filled=\"true\" ';\n            closed = vpath[0] === vpath[vpath.length - 1] ? 'x ' : '';\n            vel = '<v:shape coordorigin=\"0 0\" coordsize=\"' + this.pixelWidth + ' ' + this.pixelHeight + '\" ' +\n                 ' id=\"jqsshape' + shapeid + '\" ' +\n                 stroke +\n                 fill +\n                ' style=\"position:absolute;left:0px;top:0px;height:' + this.pixelHeight + 'px;width:' + this.pixelWidth + 'px;padding:0px;margin:0px;\" ' +\n                ' path=\"m ' + initial + ' l ' + vpath.join(', ') + ' ' + closed + 'e\">' +\n                ' </v:shape>';\n            return vel;\n        },\n\n        _drawCircle: function (shapeid, x, y, radius, lineColor, fillColor, lineWidth) {\n            var stroke, fill, vel;\n            x -= radius;\n            y -= radius;\n            stroke = lineColor === undefined ? ' stroked=\"false\" ' : ' strokeWeight=\"' + lineWidth + 'px\" strokeColor=\"' + lineColor + '\" ';\n            fill = fillColor === undefined ? ' filled=\"false\"' : ' fillColor=\"' + fillColor + '\" filled=\"true\" ';\n            vel = '<v:oval ' +\n                 ' id=\"jqsshape' + shapeid + '\" ' +\n                stroke +\n                fill +\n                ' style=\"position:absolute;top:' + y + 'px; left:' + x + 'px; width:' + (radius * 2) + 'px; height:' + (radius * 2) + 'px\"></v:oval>';\n            return vel;\n\n        },\n\n        _drawPieSlice: function (shapeid, x, y, radius, startAngle, endAngle, lineColor, fillColor) {\n            var vpath, startx, starty, endx, endy, stroke, fill, vel;\n            if (startAngle === endAngle) {\n                return '';  // VML seems to have problem when start angle equals end angle.\n            }\n            if ((endAngle - startAngle) === (2 * Math.PI)) {\n                startAngle = 0.0;  // VML seems to have a problem when drawing a full circle that doesn't start 0\n                endAngle = (2 * Math.PI);\n            }\n\n            startx = x + Math.round(Math.cos(startAngle) * radius);\n            starty = y + Math.round(Math.sin(startAngle) * radius);\n            endx = x + Math.round(Math.cos(endAngle) * radius);\n            endy = y + Math.round(Math.sin(endAngle) * radius);\n\n            if (startx === endx && starty === endy) {\n                if ((endAngle - startAngle) < Math.PI) {\n                    // Prevent very small slices from being mistaken as a whole pie\n                    return '';\n                }\n                // essentially going to be the entire circle, so ignore startAngle\n                startx = endx = x + radius;\n                starty = endy = y;\n            }\n\n            if (startx === endx && starty === endy && (endAngle - startAngle) < Math.PI) {\n                return '';\n            }\n\n            vpath = [x - radius, y - radius, x + radius, y + radius, startx, starty, endx, endy];\n            stroke = lineColor === undefined ? ' stroked=\"false\" ' : ' strokeWeight=\"1px\" strokeColor=\"' + lineColor + '\" ';\n            fill = fillColor === undefined ? ' filled=\"false\"' : ' fillColor=\"' + fillColor + '\" filled=\"true\" ';\n            vel = '<v:shape coordorigin=\"0 0\" coordsize=\"' + this.pixelWidth + ' ' + this.pixelHeight + '\" ' +\n                 ' id=\"jqsshape' + shapeid + '\" ' +\n                 stroke +\n                 fill +\n                ' style=\"position:absolute;left:0px;top:0px;height:' + this.pixelHeight + 'px;width:' + this.pixelWidth + 'px;padding:0px;margin:0px;\" ' +\n                ' path=\"m ' + x + ',' + y + ' wa ' + vpath.join(', ') + ' x e\">' +\n                ' </v:shape>';\n            return vel;\n        },\n\n        _drawRect: function (shapeid, x, y, width, height, lineColor, fillColor) {\n            return this._drawShape(shapeid, [[x, y], [x, y + height], [x + width, y + height], [x + width, y], [x, y]], lineColor, fillColor);\n        },\n\n        reset: function () {\n            this.group.innerHTML = '';\n        },\n\n        appendShape: function (shape) {\n            var vel = this['_draw' + shape.type].apply(this, shape.args);\n            if (this.rendered) {\n                this.group.insertAdjacentHTML('beforeEnd', vel);\n            } else {\n                this.prerender += vel;\n            }\n            this.lastShapeId = shape.id;\n            return shape.id;\n        },\n\n        replaceWithShape: function (shapeid, shape) {\n            var existing = $('#jqsshape' + shapeid),\n                vel = this['_draw' + shape.type].apply(this, shape.args);\n            existing[0].outerHTML = vel;\n        },\n\n        replaceWithShapes: function (shapeids, shapes) {\n            // replace the first shapeid with all the new shapes then toast the remaining old shapes\n            var existing = $('#jqsshape' + shapeids[0]),\n                replace = '',\n                slen = shapes.length,\n                i;\n            for (i = 0; i < slen; i++) {\n                replace += this['_draw' + shapes[i].type].apply(this, shapes[i].args);\n            }\n            existing[0].outerHTML = replace;\n            for (i = 1; i < shapeids.length; i++) {\n                $('#jqsshape' + shapeids[i]).remove();\n            }\n        },\n\n        insertAfterShape: function (shapeid, shape) {\n            var existing = $('#jqsshape' + shapeid),\n                 vel = this['_draw' + shape.type].apply(this, shape.args);\n            existing[0].insertAdjacentHTML('afterEnd', vel);\n        },\n\n        removeShapeId: function (shapeid) {\n            var existing = $('#jqsshape' + shapeid);\n            this.group.removeChild(existing[0]);\n        },\n\n        getShapeAt: function (el, x, y) {\n            var shapeid = el.id.substr(8);\n            return shapeid;\n        },\n\n        render: function () {\n            if (!this.rendered) {\n                // batch the intial render into a single repaint\n                this.group.innerHTML = this.prerender;\n                this.rendered = true;\n            }\n        }\n    });\n\n}))}(document, Math));\n"]}